// grab the packages we need
var firebase = require("firebase-admin");
var express = require('express');

var app = express();
var port = process.env.PORT || 8080;

var fs = require('fs');
var http = require('http')
var https = require('https')
var request = require('request');
var axios = require('axios');
var circular = require('circular');

var S = require('string');

var nodemailer = require('nodemailer');
var ses = require('nodemailer-ses-transport');
var schedule = require('node-schedule');
var Promise = require('promise');
var escape = require('escape-html');
var _ = require("underscore");
var async = require("async");
var cors = require('cors')
var graph = require('fbgraph');
var json2csv = require('json2csv');
var shortLinkData = {}
var {Pxl, JoboPxlForEmails, FirebasePersistenceLayer} = require('./pxl');
var imgNocache = require('nocache');

var privateKey = fs.readFileSync('server.key', 'utf8');
var certificate = fs.readFileSync('server.crt', 'utf8');

var credentials = {key: privateKey, cert: certificate};

var CONFIG;
var font = "'HelveticaNeue-Light','Helvetica Neue Light','Helvetica Neue',Helvetica,Arial,'Lucida Grande',sans-serif;"
var staticData = {
    disliked: 0,
    viewed: 0,
    liked: 0,
    shared: 0,
    rated: 0,
    rateAverage: 0,
    matched: 0,
    chated: 0,
    like: 0,
    share: 0,
    rate: 0,
    match: 0,
    chat: 0,
    timeOnline: 0,
    login: 1,
    profile: 0
}
var jobType = {
    restaurant: ["server", "barista", "bartender", "cashier", "cook", "prepcook", "receptionist_cashier", "shipper"],
    cafe: ["server", "barista", "bartender", "cashier", "receptionist_cashier"],
    lodging: ["cook", "prepcook", "receptionist_cashier", "manager", "security"],
    store: ["sale", "manager"]
};


firebase.initializeApp({
    credential: firebase.credential.cert('adminsdk.json'),
    databaseURL: "https://jobfast-359da.firebaseio.com"
});

var secondary = firebase.initializeApp({
    credential: firebase.credential.cert('adminsdk-jobo.json'),
    databaseURL: "https://jobo-b8204.firebaseio.com"
}, "secondary");

var joboPxl = firebase.initializeApp({
    credential: firebase.credential.cert('./pxl/jobo-pxl.json'),
    databaseURL: "https://jobo-pxl.firebaseio.com"
}, 'jobo-pxl');
var joboTest = firebase.initializeApp({
    credential: firebase.credential.cert('jobotest.json'),
    databaseURL: "https://jobotest-15784.firebaseio.com"
}, 'joboTest');


const MongoClient = require('mongodb');


var uri = 'mongodb://joboapp:joboApp.1234@ec2-54-157-20-214.compute-1.amazonaws.com:27017/joboapp';
var md, userCol, profileCol, storeCol, jobCol, notificationCol, staticCol, leadCol, emailChannelCol, logCol,
    facebookPostCol;

MongoClient.connect(uri, function (err, db) {
    console.log(err);

    md = db;
    userCol = md.collection('user');
    profileCol = md.collection('profile');
    storeCol = md.collection('store');
    jobCol = md.collection('job');
    notificationCol = md.collection('notification');
    staticCol = md.collection('static');
    leadCol = md.collection('lead');
    emailChannelCol = md.collection('emailChannel');
    logCol = md.collection('log');
    facebookPostCol = md.collection('facebookPost');


    console.log("Connected correctly to server.");
});


var db = joboTest.database();
var db2 = joboPxl.database();
var db3 = secondary.database();

var auth = firebase.auth()

var configRef = db.ref('config');
var staticRef = db.ref('static');

var userRef = db3.ref('user');
var profileRef = db3.ref('profile');
var storeRef = db3.ref('store');
var jobRef = db3.ref('job');
var likeActivityRef = db.ref('activity/like');

var langRef = db.ref('tran/vi');

var googleJobRef = db.ref('googleJob');
var logRef = db2.ref('log');
var actRef = db2.ref('act');



var dataUser, dataProfile, dataStore, dataJob, dataStatic, likeActivity, dataLog, dataNoti, dataEmail, dataLead, Lang,
    keyListData, datagoogleJob;

var groupRef = db.ref('groupData');

var groupData, groupArray;


app.use(cors());

app.use(imgNocache());
app.use(express.static(__dirname + '/static'));
app.use(function (req, res, next) {
    res.contentType('application/json');
    next();
});


// PXL FOR Emails initialize

app.get('/sendNotification', function (req, res) {
    var email = req.param('email') || 'thonglk.mac@gmail.com'
    var address = req.param('address')

    console.log('asd');
    sendNotification({email}, {
        title: 'thÃ´ng',
        body: 'haha',
        description1: 'huhu',
        linktoaction: 'https://google.com',
        calltoaction: 'Hihi',
        address : address
    }).then(dt => res.status(200).json(dt))
        .catch(err => res.status(500).send(err));
})

function sendNotification(userData, mail, channel, time, notiId) {
    return new Promise(function (resolve, reject) {
        if (!userData) return;
        if (!channel) {
            channel = {
                web: true,
                letter: true,
                mobile: true,
                messenger: true
            }
        }
        if (!time) {
            time = Date.now() + 5000
        }
        if (!notiId) {
            notiId = keygen()
        }

        var notification = {
            userData: userData,
            mail: mail,
            notiId,
            time: time,
            createdAt: Date.now(),
            channel: channel
        }

        db2.ref('tempNoti/' + notiId)
            .set(notification)
            .then(function (result) {
                console.log('sendNotification', notiId);
                resolve(notification);
            })
            .catch(function (err) {
                console.log('sendNotification failed', notiId);
                reject(err);
            });

    });
}


var publishChannel = {
    Jobo: {
        pageId: '385066561884380',
        token: 'EAAEMfZASjMhgBAOWKcfIFZBPvH1OSdZAg2VFH103o0cNimDFg0wxtcSn5E3eaY4C8sDGQYBiaSZAxY8WRpaIj51hB2UfYZAqk3Wd1UiUoc393wgRZBpkiFR1iEGjfb1oE272ZCxkxECLiT1x6UcqYRZCemdpVmt1TnPupJgL8jlcdgZDZD'
    }
};

app.get('/convert',function (req,res) {
    var col = req.param('col')

    db.ref(col).once('value',function (snap) {
        db3.ref(col).update(snap.val()).then(()=> res.send({'code':'success'})).catch(err => res.send({err}))
    })

})

app.get('/sendStoretoPage', function (req, res) {
    var storeId = req.param('storeId')
    sendStoretoPage(storeId)
    res.send(storeId)
})

function sendStoretoPage(storeId) {
    var storeData = dataStore[storeId];
    storeData.jobData = _.where(dataJob, {storeId: storeId});
    if (storeData.jobData) {
        if (storeData.createdBy
            && dataUser[storeData.createdBy]) {

            storeData.userInfo = dataUser[storeData.createdBy]
            if (storeData.avatar) {
                PublishPhoto(publishChannel.Jobo.pageId, createJDStore(storeId, 2, storeData.jobData[0].jobId), publishChannel.Jobo.token)
            } else {
                PublishPost(publishChannel.Jobo.pageId, createJDStore(storeId, 2, storeData.jobData[0].jobId), publishChannel.Jobo.token)
            }
        }

    }

}

app.get('/PublishPost', function (req, res) {
    let {message, accessToken} = req.query
    var userId = ""
    var text = {text: message}
    PublishPost(userId, text, accessToken)
    res.send('done')
})

function PublishPost(userId, text, accessToken) {
    if (text && accessToken) {
        graph.post(userId + "/feed?access_token=" + accessToken,
            {
                "message": text.text,
                "link": text.link
            },
            function (err, res) {
                // returns the post id
                console.log(res, err);


            });
    } else {
        console.log('PublishPost error')
    }
}

function PublishPhoto(userId, text, accessToken) {
    if (userId && text && accessToken) {

        graph.post(userId + "/photos?access_token=" + accessToken,
            {
                "url": text.image,
                "caption": text.text
            },
            function (err, res) {
                // returns the post id
                console.log(res, err);
            });
    } else {
        console.log('PublishPhoto error')

    }
}

function PublishComment(postId, text, accessToken) {
    if (postId && text && accessToken) {
        graph.post(postId + "/comments?access_token=" + accessToken,
            {
                "message": text
            },
            function (err, res) {
                // returns the post id
                console.log(res, err);
            }
        )

    } else {
        console.log('PublishComment error')
    }
}

var facebookUser
var popularJob = {}

function init() {
    console.log('listenDatabase')
    configRef.on('value', function (snap) {
        CONFIG = snap.val()

        console.log('CONFIG.APIURL', CONFIG.APIURL)
        facebookUser = {
            vn: [],
        }

        for (var i in CONFIG.facebookAccount) {
            var facebook = CONFIG.facebookAccount[i]


            if (facebook.block) {
                if (!facebookUser.block) {
                    facebookUser.block = []
                }
                facebookUser.block.push(facebook.key);
            } else {
                if (facebook.area) {
                    if (!facebookUser[facebook.area]) {
                        facebookUser[facebook.area] = []
                    }
                    facebookUser[facebook.area].push(facebook.key);

                }
                facebookUser.vn.push(facebook.key)

            }

        }
        console.log(facebookUser)

    })
    langRef.on('value', function (snap) {
        Lang = snap.val()
    })

    dataStatic = {}
    dataUser = {}
    datagoogleJob = {}
    dataProfile = {}
    dataJob = {}
    dataStore = {}
    likeActivity = {}
    keyListData = {}

    staticRef.on('child_added', function (snap) {
        dataStatic[snap.key] = snap.val()
    });
    staticRef.on('child_changed', function (snap) {
        dataStatic[snap.key] = snap.val()
    });

    userRef.on('child_added', function (snap) {
        dataUser[snap.key] = snap.val()
    });
    userRef.on('child_changed', function (snap) {
        dataUser[snap.key] = snap.val()
    });
    googleJobRef.on('child_added', function (snap) {
        datagoogleJob[snap.key] = snap.val()
    });
    googleJobRef.on('child_changed', function (snap) {
        datagoogleJob[snap.key] = snap.val()
    });

    profileRef.on('child_added', function (snap) {
        dataProfile[snap.key] = snap.val()

    });
    profileRef.on('child_changed', function (snap) {

        dataProfile[snap.key] = snap.val()
    });

    jobRef.on('child_added', function (snap) {

        dataJob[snap.key] = snap.val()
        var job = dataJob[snap.key]

        if (!popularJob[job.job]) {
            popularJob[job.job] = {job: job.job, unit: 1}
        } else {
            popularJob[job.job].unit++
        }
        CONFIG.popularJob = _.sortBy(popularJob, function (job) {
            return -job.unit
        })

        groupRef.once('value', function (snap) {
            groupData = snap.val();
            groupArray = _.toArray(groupData)
            CONFIG.groupData = groupData
        });


    });
    jobRef.on('child_changed', function (snap) {
        dataJob[snap.key] = snap.val()
    });
    storeRef.on('child_added', function (snap) {

        dataStore[snap.key] = snap.val()
    });
    storeRef.on('child_changed', function (snap) {
        dataStore[snap.key] = snap.val()
    });
    likeActivityRef.on('child_added', function (snap) {
        likeActivity[snap.key] = snap.val()
    });
    likeActivityRef.on('child_changed', function (snap) {
        likeActivity[snap.key] = snap.val()
    });
    db.ref('keyList').on('child_added', function (snap) {
        keyListData[snap.key] = snap.val()
    })
    setTimeout(startList, 15000)


}

process.on('exit', function (code) {
    //Notification code when application process is killed

    const data = {
        recipientIds: ['1100401513397714', '1460902087301324', '1226124860830528'],
        messages: {
            text: `Server sáº­p sml rá»i: ${code}`
        }
    };
    axios.post('https://jobobot.herokuapp.com/noti', data);
});

process.on('uncaughtException', function (err) {
    console.log('Caught exception: ' + err);
    //1100401513397714;1460902087301324;1226124860830528
    const data = {
        recipientIds: ['1100401513397714', '1460902087301324', '1226124860830528'],
        messages: {
            text: `Server sáº­p sml rá»i, lá»i uncaughtException: ${err}`
        }
    };
    axios.post('https://jobobot.herokuapp.com/noti', data);
});
app.get('/lookalike', function (req, res) {
    var job = req.param('job')

    var fields = ['name', 'phone', 'email', 'type'];
    var myUser = [];
    var a = 0;

    for (var i in dataProfile) {
        var profile = dataProfile[i]
        if (profile.job && profile.job[job] && dataUser[i]) {
            var user = dataUser[i]
            a++
            if (user.phone) {
                var phoneStr = user.phone.toString()
                if (phoneStr.charAt(0) == '0') {
                    phoneStr = phoneStr.replace("0", "84");
                } else {
                    phoneStr = "84" + phoneStr
                }
            } else {
                var phoneStr = ''
            }

            if (user.type == 2) {
                myUser.push({
                    name: user.name || '',
                    phone: phoneStr,
                    email: user.email || '',
                    type: user.type || ''
                })
            }


        }
    }
    return new Promise(function (resolve, reject) {
        resolve(myUser)
    }).then(function (myUser) {
        var csv = json2csv({data: myUser, fields: fields});

        fs.writeFile('jobseeker_' + job + '.csv', csv, function (err) {
            if (err) throw err;
            console.log('file saved');
            res.send('file saved ' + a)

        });

    })

})

app.get('/updateDeadline', function (req, res) {

    updateDeadline()
    res.send('done')
})

function updateDeadline() {
    var deadline = Date.now() + 1000 * 86400 * 7
    jobRef.once('value', function (snap) {
        dataJob = snap.val()
        for (var i in dataJob) {
            var job = dataJob[i]
            if (job.storeId && job.job && dataStore[job.storeId] && dataStore[job.storeId].storeName) {
                jobRef.child(i).update({deadline: deadline})
            } else {
                console.log(job)
            }
        }
    });
}

function createListPremiumStore() {
    var jobHN = "HN \n"
    var jobHCM = " \n SG \n"

    for (var i in dataStore) {
        var storeData = dataStore[i]
        if (storeData.createdBy
            && dataUser[storeData.createdBy]
            && dataUser[storeData.createdBy].package == 'premium') {
            var disToHN = getDistanceFromLatLonInKm(storeData.location.lat, storeData.location.lng, CONFIG.address.hn.lat, CONFIG.address.hn.lng)
            var disToSG = getDistanceFromLatLonInKm(storeData.location.lat, storeData.location.lng, CONFIG.address.sg.lat, CONFIG.address.sg.lng)
            if (disToHN < 100) {
                jobHN = jobHN + 'â ' + getStringJob(storeData.job) + ' | ' + storeData.storeName + ' | ' + shortAddress(storeData.address) + ' ' + i + ' \n'
            } else if (disToSG < 100) {
                jobHCM = jobHCM + 'â ' + getStringJob(storeData.job) + ' | ' + storeData.storeName + ' | ' + shortAddress(storeData.address) + ' ' + i + ' \n'
            }
        }

    }
    return jobHN + jobHCM
}

function getShortPremiumJob(ref) {
    for (var i in dataJob) {
        var job = dataJob[i]
        if (job.createdBy && job.storeId
            && dataUser[job.createdBy]
            && dataUser[job.createdBy].package == 'premium'
            && dataStore[job.storeId]
            && job.deadline
            && job.deadline > Date.now()
        ) {
            var longURL = CONFIG.WEBURL + '/view/store/' + job.storeId + '?job=' + job.job + '#ref=' + ref + job.storeId + job.job;
            console.log(longURL)
            shortenURL(longURL, i)
        }
    }
}

app.get('/PremiumJob', function (req, res) {
    let {where, type, job, industry, postId} = req.query
    res.send(createListPremiumJob(where, type, job, industry, postId))
});
app.get('/googleJob', function (req, res) {
    var list = []
    for (var i in datagoogleJob) {
        if (datagoogleJob[i].storeName) {
            list.push(datagoogleJob[i].storeName)
        }

    }

    var send = _.sample(list, 80)
    res.send(send)
});

function createListPremiumJob(where, type, job, industry, postId) {
    var jobHN = "";
    var jobHNArray = []
    var jobHCM = "";
    var jobHCMArray = []
    var jobAll = '';
    var jobAllArray = []

    var jobs = _.sortBy(dataJob, function (card) {
        return -card.createdAt
    })
    for (var i in jobs) {
        var jobData = Object.assign({}, jobs[i]);
        if (jobData.createdBy
            && jobData.storeId
            && dataUser[jobData.createdBy]
            && dataUser[jobData.createdBy].package == 'premium'

            && dataStore[jobData.storeId]
            && jobData.deadline > Date.now()

            && (jobData.job == job || !job)
            && (jobData.industry == industry || !industry)
        ) {
            var storeData = dataStore[jobData.storeId]
            jobData = Object.assign(jobData, storeData)

            var jobArray = {
                storeId: jobData.storeId,
                jobId: jobData.jobId,
                jobName: jobData.jobName,
                storeName: jobData.storeName
            };

            var jobString = 'â ' + jobData.jobName + ' | ' + jobData.storeName + ' | ' + shortAddress(jobData.address)

            if (postId) jobString = jobString + ' | ' + addTrackingEmail(postId, CONFIG.WEBURL + '/view/store/' + jobData.storeId + '?job=' + jobData.jobId + '#ref=' + postId, 'c', 'f', jobData.jobId);
            else jobString = jobString + ' | ' + jobData.jobId

            var disToHN = getDistanceFromLatLonInKm(storeData.location.lat, storeData.location.lng, CONFIG.address.hn.lat, CONFIG.address.hn.lng)
            var disToSG = getDistanceFromLatLonInKm(storeData.location.lat, storeData.location.lng, CONFIG.address.sg.lat, CONFIG.address.sg.lng)
            if (disToHN < 100) {
                jobHN = jobHN + jobString + ' \n';
                jobHNArray.push(jobArray)
            } else if (disToSG < 100) {
                jobHCM = jobHCM + jobString + ' \n';
                jobHCMArray.push(jobArray)

            }
            jobAll = jobAll + jobString + '\n';
            jobAllArray.push(jobArray)
        }
    }

    if (type == 'array') {
        if (where == 'hn') {
            return jobHNArray
        } else if (where == 'hcm') {
            return jobHCMArray
        } else {
            return jobAllArray
        }
    } else {
        if (where == 'hn') {
            return jobHN
        } else if (where == 'hcm') {
            return jobHCM
        } else {
            return jobAll
        }
    }
}

app.get('/createListGoogleJob', function (req, res) {
    res.send(createListGoogleJob())
})


app.get('/scheduleJobPushEveryday', function (req, res) {
    res.send(scheduleJobPushEveryday())
})
// schedule.scheduleJob({hour: 11, minute: 48}, function () {
//     scheduleJobPushEveryday()
// })
var stringWhere = {
    hn: 'HÃ  Ná»i',
    hcm: 'SÃ i GÃ²n'
}

function scheduleJob_ListJob(where, job, industry) {


    for (var i in groupData) {
        var group = groupData[i]

        var text = `Danh sÃ¡ch viá»c lÃ m `
        if (job) text = text + `${Lang[job]}`
        if (industry) text = text + ` trong ${Lang[industry]}`
        if (where && stringWhere[where]) text = text + ` táº¡i ${stringWhere[where]}`
        text = text + `\n 
        ${createListPremiumJob(where, null, job, industry, postId)} `
    }
}

function scheduleJobPushEveryday() {
    var jobArr = createListPremiumJob(null, 'array')
    var time = Date.now() + 5000
    var a = 0
    for (var i in jobArr) {
        var job = jobArr[i]
        var sche = time + a * 60 * 60 * 1000;
        a++
        console.log(new Date(sche).getHours())
        PostStore(job.storeId, job.jobId, null, null, null, null, sche)
    }
    var mail = {
        title: 'Jobo_AutoPost | ' + new Date().getDate() + '/' + new Date().getMonth(),
        body: createListPremiumJob(),
        description1: 'Dear friend,',
        description2: createListPremiumJob(),
        calltoaction: 'Hello the world',
        linktoaction: 'https://www.messenger.com/t/979190235520989',
        image: ''
    }
    var time = Date.now()
    for (var i in dataUser) {
        if (dataUser[i].admin == true) {
            time = time + 5000
            sendNotification(dataUser[i], mail, {letter: true, web: true, messenger: true, mobile: true}, time)
        }
    }
    return {code:'success'}


}


function createListGoogleJob(where) {
    var jobHN = "";
    var jobHCM = "";
    var dataSort = _.sortBy(datagoogleJob, function (card) {
        return -card.createdAt
    })
    for (var i in dataSort) {
        var job = dataSort[i]
        var jobString = 'â ' + job.jobName + ' | ' + job.storeName + ' | ' + shortAddress(job.address) + ' | ' + new Date(job.createdAt) + '|' + job.rating + ' \n'
        var disToHN = getDistanceFromLatLonInKm(job.location.lat, job.location.lng, CONFIG.address.hn.lat, CONFIG.address.hn.lng)
        var disToSG = getDistanceFromLatLonInKm(job.location.lat, job.location.lng, CONFIG.address.sg.lat, CONFIG.address.sg.lng)
        if (disToHN < 100) {
            jobHN = jobHN + jobString
        } else if (disToSG < 100) {
            jobHCM = jobHCM + jobString
        }
    }

    if (where == 'hn') {
        return jobHN
    } else if (where == 'hcm') {
        return jobHCM
    } else {
        return jobHN + jobHCM
    }
}


function shortenURL(longURL, key) {
    var shorturl = '';

    var options = {
        url: 'https://api-ssl.bitly.com/v3/shorten?access_token=3324d23b69543241ca05d5bbd96da2b17bf523cb&longUrl=' + longURL + '&format=json',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    }


// Start the request
    request(options, function (error, response, body) {
        if (body) {
            var res = JSON.parse(body)
            if (res.data && res.data.url) {
                shorturl = res.data.url
                shortLinkData[key] = shorturl

            }
        }
    })
    return new Promise(function (resolve, reject) {
        resolve(shorturl)
    })
}

var configP = {
    l: 'letter',
    M: 'messenger',
    w: 'web',
    m: 'mobile',
    f: 'facebook'
}
var configT = {
    o: 'open',
    c: 'click'
}

function addTrackingEmail(notiId, url, t = 'o', p = 'l', i = '') {
    if (url) {
        var trackUrl = ''
        var platform = configP[p]
        var type = configT[t]
        var id = notiId + ':' + p + ':' + t + ':' + i
        joboPxl.database().ref('/links/' + id)
            .update({
                url,
                linkId: notiId,
                platform,
                type
            })
        if (t == 'o') {
            trackUrl = CONFIG.AnaURL + '/l/' + id
        } else {
            trackUrl = CONFIG.WEBURL + '/link/' + id
        }
        console.log('url', trackUrl)
        return trackUrl
    }


}


function createJDJob(jobId) {
    var Job = dataJob[jobId]
    var text = '';
    if (Job) {
        if (Job.jobName) {
            text = text + 'â ' + Job.jobName + '\n \n'
        }
        if (Job.working_type) {
            text = text + 'â HÃ¬nh thá»©c: ' + Lang[Job.working_type] + '\n'
        }
        if (Job.salary) {
            text = text + 'â Má»©c lÆ°Æ¡ng: ' + Job.salary + ' triá»u Äá»ng/thÃ¡ng \n'
        }
        if (Job.unit) {
            text = text + 'â Sá» lÆ°á»£ng: ' + Job.unit + '\n'
        }
        if (Job.sex) {
            text = text + 'â Giá»i tÃ­nh: ' + Lang[Job.sex] + '\n'
        }


        var link = CONFIG.WEBURL + '/view/store/' + Job.storeId + '?job=' + Job.job + '#ref=push'

        text = text + 'â¡ á»¨ng tuyá»n táº¡i: ' + link + '\n  \n '

        return text
    }
}

app.get('/createJDStore', function (req, res) {
    var storeId = req.param('storeId')
    var jobId = req.param('jobId')
    var a = req.param('a');
    createJDStore(storeId, a, jobId)
        .then(text => res.status(200).json(text))
        .catch(err => res.status(500).json(err));
})

const JD = require('./JDContent');

function createJDStore(storeId, random, jobId, postId, typejob) {
    // return new Promise((resolve, reject) => {
    var storeData = dataStore[storeId];
    var Job = dataJob[jobId];
    var text = '',
        working_type = '',
        work_time = '',
        salary = '',
        hourly_wages = '',
        figure = '',
        unit = '',
        experience = '',
        deadline = '',
        sex = '',
        time = '',
        description = '',
        job = 'default';
    const contact = CONFIG.contact[isWhere(storeId)].phone;
    const address = shortAddress(storeData.address).replace(/\s\s/g, ' ');
    const storeName = storeData.storeName;
    const jobName = Job.jobName;

    if (!typejob) {

        if (Job.job.match(/server|cashier|barista|bartender|receptionist|prepcook|cook|receptionist_cashier/g)) job = 'server';
        else if (Job.job.match(/business|administration|manager|marketing_pr|designer/g)) {
            job = 'business';
        } else if (Job.job.match(/sale/g)) {
            job = 'sale';
        }
    }

    if (random && (Object.keys(JD[job]).length - 1) < random) throw new Error('Out of JD');
    if (!random) {
        random = _.random(0, Object.keys(JD[job]).length - 1)
    }

    var link = '';

    if (jobId) {
        link = CONFIG.WEBURL + '/signup/2?job=' + jobId + '#ref=' + postId;
    } else {
        link = CONFIG.WEBURL + '/view/store/' + storeData.storeId + '#ref=' + postId;
        storeData.Url = link;
    }
    if (Job.working_type) working_type = `${CONFIG.data.working_type[Job.working_type]}`;
    if (Job.salary) salary = `${Job.salary}`;
    if (Job.hourly_wages) hourly_wages = `${Job.hourly_wages}`;
    if (Job.salary && Job.hourly_wages && Job.working_type != 'fulltime') salary = '';
    if (Job.figure) figure = 'Cáº§n ngoáº¡i hÃ¬nh Æ°a nhÃ¬n cá»i má» ð\n';
    if (Job.deadline) {
        const date = new Date(Job.deadline);
        deadline = `${date.getDate() + 2}/${date.getMonth() + 1}/${date.getFullYear()}`;
    }
    if (Job.experience) experience = Job.experience;
    if (Job.unit) unit = `${Job.unit}`;
    if (Job.sex) sex = Job.sex;
    if (Job.work_time) work_time = _.toArray(Job.work_time);
    if (Job.description) description = `${Job.description}`;

    text = JD[job][random]({
        storeName,
        address,
        jobName,
        salary,
        hourly_wages,
        working_type,
        work_time,
        jobUrl: link,
        storeUrl: storeData.Url,
        figure,
        unit,
        experience,
        sex,
        deadline,
        description,
        contact
    });

    if (storeData.photo) {
        storeData.photo.push(storeData.avatar)
    } else {
        storeData.photo = [storeData.avatar]
    }

    var randomphoto = _.random(0, storeData.photo.length - 1)
    return {
        text: text,
        link: link,
        image: storeData.photo[randomphoto]
    };
}

app.get('/check', function (req, res) {
    checkProfile().then(result => res.send(result))
})

function checkJob() {
    return new Promise(function (resolve, reject) {
        jobRef.once('value', function (a) {
            var arrayJob = _.toArray(a.val())
            var i = 0;
            loop(i)

            function loop(i) {

                console.log('arrayJob.length= ' + i + '/' + arrayJob.length)

                var job = Object.assign({}, arrayJob[i]);
                console.log('job', job.jobName)

                if (!job.jobId) {
                    console.log('jobId')
                    i++
                    if (i < arrayJob.length) {
                        loop(i)
                    } else {
                        resolve('done')
                    }
                } else {

                    if (!job.deadline) {
                        console.log('job.deadline', i)
                        job.deadline = Date.now() + 1000 * 60 * 60 * 24 * 7
                    }

                    if (job.act) {
                        console.log('job.act remove', i)
                        delete job.act
                    }
                    if (job.distance) {
                        console.log('job.distance remove', i)
                        delete job.distance
                    }
                    if (!job.createdAt) {
                        console.log('job.createdAt ', i)

                        job.createdAt = Date.now()

                    }
                    if (!job.updatedAt) {
                        console.log('job.updatedAt ', i)
                        job.updatedAt = Date.now()
                    }
                    if (JSON.stringify(job) != JSON.stringify(arrayJob[i])) {
                        jobRef.child(job.jobId).set(job).then(function () {
                            console.log('job done', i);

                            i++
                            if (i < arrayJob.length) {
                                loop(i)
                            } else {
                                resolve('done')
                            }
                        }).catch(function (err) {
                            console.log('job err', i);

                            i++;
                            if (i < arrayJob.length) {
                            } else {
                                resolve('done')
                            }
                        })

                    } else {
                        i++
                        if (i < arrayJob.length) {
                            loop(i)
                        }
                    }
                }

            }


        })

    })
}

function checkStore() {
    return new Promise(function (resolve, reject) {
        storeRef.once('value', function (a) {

            var arrayJob = _.toArray(a.val())
            var i = 0
            loop(i)

            function loop(i) {
                console.log('arrayJob.length= ' + i + '/' + arrayJob.length)

                var store = Object.assign({}, arrayJob[i]);
                console.log(store.storeName)


                if (!store.storeId) {
                    console.log('storeId')
                    i++
                    if (i < arrayJob.length) {
                        loop(i)
                    } else {
                        resolve('done')
                    }
                    return
                }
                if (store.act) {
                    console.log('store.act remove', i)
                    delete store.act
                }
                if (store.distance) {
                    console.log('store.distance remove', i)
                    delete store.distance
                }
                if (store.static) {
                    console.log('store.static remove', i)
                    delete store.static
                }
                if (store.presence) {
                    console.log('store.presence remove', i)
                    delete store.presence
                }


                if (!store.createdAt) {
                    console.log('store.createdAt ', i)
                    store.createdAt = Date.now()
                }

                if (JSON.stringify(store) != JSON.stringify(arrayJob[i])) {
                    storeRef.child(store.storeId).set(store).then(function () {
                        console.log('job done', i)

                        i++
                        if (i < arrayJob.length) {
                            loop(i)
                        } else {
                            resolve('done')
                        }
                    })

                } else {
                    i++
                    if (i < arrayJob.length) {
                        loop(i)
                    } else {
                        resolve('done')
                    }
                }

            }
        })

    })
}

function checkProfile() {
    return new Promise(function (resolve, reject) {

        profileRef.once('value', function (a) {
            var arrayJob = _.toArray(a.val())
            var i = 0
            loop(i)

            function loop(i) {
                var profile = Object.assign({}, arrayJob[i]);
                console.log(profile.name);

                if (profile.act) {
                    console.log('profile.act remove', i)
                    delete profile.act
                }
                if (profile.distance) {
                    console.log('profile.distance remove', i)
                    delete profile.distance
                }
                if (profile.static) {
                    console.log('profile.static remove', i)
                    delete profile.static
                }
                if (profile.presence) {
                    console.log('profile.presence remove', i)
                    delete profile.presence
                }
                if (profile.err) {
                    console.log('profile.err remove', i)
                    delete profile.err
                }


                if (!profile.createdAt) {
                    console.log('profile.createdAt ', i)

                    profile.createdAt = Date.now()

                }
                if (!profile.updatedAt) {
                    console.log('profile.updatedAt ', i)
                    profile.updatedAt = Date.now()
                }

                if (JSON.stringify(profile) != JSON.stringify(arrayJob[i])) {
                    profileRef.child(profile.userId).set(profile).then(function () {
                        console.log('job done', i)

                        i++
                        if (i < arrayJob.length) {
                            loop(i)
                        } else {
                            resolve('done')
                        }
                    })

                } else {
                    i++
                    if (i < arrayJob.length) {
                        loop(i)
                    } else {
                        resolve('done')
                    }
                }

            }

        })
    })
}

function checkUser() {
    return new Promise(function (resolve, reject) {

        userRef.once('value', function (a) {
            var arrayJob = _.toArray(a.val())
            var i = 0
            loop(i)

            function loop(i) {
                var user = Object.assign({}, arrayJob[i]);
                console.log(user.name);
                if (user.email && user.email.length < 4) {
                    auth.getUser(user.userId)
                        .then(function (userRecord) {
                            // See the UserRecord reference doc for the contents of userRecord.
                            if (userRecord.email) {
                                console.log('email update')
                                userRef.child(userRecord.userId).update({email: userRecord.email}).then(function () {
                                    i++
                                    if (i < arrayJob.length) {
                                        loop(i)
                                    } else {
                                        resolve('done')
                                    }
                                })
                            } else {
                                i++
                                if (i < arrayJob.length) {
                                    loop(i)
                                } else {
                                    resolve('done')
                                }
                            }
                        })
                        .catch(function (error) {
                            console.log("Error fetching user data:", error);
                        });
                } else {
                    i++
                    if (i < arrayJob.length) {
                        loop(i)
                    } else {
                        resolve('done')
                    }
                }


            }


        })
    })
}


function shortAddress(fullAddress) {
    if (fullAddress) {
        var mixAddress = fullAddress.split(",")
        if (mixAddress.length < 3) {
            return fullAddress
        } else {
            var address = mixAddress[0] + ', ' + mixAddress[1] + ', ' + mixAddress[2]
            return address
        }

    }
}

function checkInadequateProfile() {
    var refArray = {}
    var a = 0, b = 0, c = 0, d = 0
    var aa = 0, bb = 0, cc = 0, dd = 0
    var jobseeker = {
        hn: 0,
        sg: 0,
        other: 0
    };
    var time = new Date().getTime() - 86400 * 1000 * 1
    for (var i in dataUser) {
        if (dataUser[i].createdAt > time) {
            if (dataProfile[i] && dataUser[i].type == 2) {
                a++

            } else if (!dataProfile[i] && dataUser[i].type == 2) {
                b++
            } else if (dataUser[i].currentStore && dataUser[i].type == 1) {
                c++
            } else if (!dataUser[i].currentStore && dataUser[i].type == 1) {
                d++
            }
        }

        if (dataProfile[i] && dataUser[i].type == 2) {

            if (dataProfile && dataProfile[i] && dataProfile[i].location) {
                var disToHn = getDistanceFromLatLonInKm(dataProfile[i].location.lat, dataProfile[i].location.lng, CONFIG.address.hn.lat, CONFIG.address.hn.lng)
                if (disToHn < 100) {
                    jobseeker.hn++
                } else {
                    var disToSg = getDistanceFromLatLonInKm(dataProfile[i].location.lat, dataProfile[i].location.lng, CONFIG.address.sg.lat, CONFIG.address.sg.lng)
                    if (disToSg < 100) {
                        jobseeker.sg++
                    } else {
                        jobseeker.other++
                    }
                }
            }

        } else if (!dataProfile[i] && dataUser[i].type == 2) {
            bb++
        } else if (dataUser[i].currentStore && dataUser[i].type == 1) {
            cc++
        } else if (!dataUser[i].currentStore && dataUser[i].type == 1) {
            dd++
        }
        if (dataUser[i].ref) {
            if (!refArray[dataUser[i].ref]) {
                refArray[dataUser[i].ref] = 1
            } else {
                refArray[dataUser[i].ref]++
            }
        }
    }
    return new Promise(function (res, rej) {
        var datasend = {
            checkInadequateProfile24h: {
                hasProfile: a,
                noProfile: b,
                hasStore: c,
                noStore: d
            },
            checkInadequateProfileAll: {
                hasProfile: jobseeker,
                noProfile: bb,
                hasStore: cc,
                noStore: dd,
            },
            ref: refArray
        }

        res(datasend)
    })
}

function checkNotCreate() {
    for (var i in dataUser) {
        if (!dataProfile[i] && dataUser[i].type == 2) {

            var user = dataUser[i]
            var mail = {
                title: "Chá» cÃ²n 1 bÆ°á»c ná»¯a lÃ  báº¡n cÃ³ thá» tÃ¬m ÄÆ°á»£c viá»c phÃ¹ há»£p",
                body: getLastName(user.name) + " Æ¡i, hÃ£y táº¡o há» sá»£ vÃ  chá»n cÃ´ng viá»c phÃ¹ há»£p vá»i báº¡n nhÃ©, náº¿u gáº·p khÃ³ khÄn thÃ¬ báº¡n gá»i vÃ o sá» 0968 269 860 Äá» ÄÆ°á»£c há» trá»£ nhÃ©!",
                subtitle: '',
                description1: 'Dear ' + getLastName(user.name),
                description2: 'HÃ£y táº¡o há» sá»£ vÃ  chá»n cÃ´ng viá»c phÃ¹ há»£p vá»i báº¡n nhÃ©, náº¿u gáº·p khÃ³ khÄn thÃ¬ báº¡n gá»i vÃ o sá» 0968 269 860 Äá» ÄÆ°á»£c há» trá»£ nhÃ©!',
                description3: 'Äáº·c biá»t, cÃ¡c báº¡n ÄÄng video giá»i thiá»u báº£n thÃ¢n cÃ³ tá» lá» xin viá»c thÃ nh cÃ´ng cao hÆ¡n 20% so vá»i nhá»¯ng báº¡n khÃ´ng. HÃ£y ÄÄng nháº­p vÃ o tÃ i khoáº£n vÃ  xin viá»c ngay thÃ´i nÃ o: joboapp.com',
                calltoaction: 'Cáº­t nháº­t ngay!',
                linktoaction: CONFIG.WEBURL,
                description4: ''
            };
            sendNotification(user, mail, {letter: true, web: true, messenger: true, mobile: true})
        }
        if (!dataUser[i].currentStore && dataUser[i].type == 1) {
            var user = dataUser[i]
            var mail = {
                title: "Chá» cÃ²n 1 bÆ°á»c ná»¯a lÃ  báº¡n cÃ³ thá» tÃ¬m ÄÆ°á»£c á»©ng viÃªn phÃ¹ há»£p",
                body: getLastName(user.name) + " Æ¡i, hÃ£y ÄÄng cÃ´ng viá»c cá»§a báº¡n lÃªn, chÃºng tÃ´i sáº½ tÃ¬m á»©ng viÃªn phÃ¹ há»£p cho báº¡n, náº¿u gáº·p khÃ³ khÄn thÃ¬ báº¡n gá»i vÃ o sá» 0968 269 860 Äá» ÄÆ°á»£c há» trá»£ nhÃ©!",
                subtitle: '',
                description1: 'Dear ' + getLastName(user.name),
                description2: 'hÃ£y ÄÄng cÃ´ng viá»c cá»§a báº¡n lÃªn, chÃºng tÃ´i sáº½ tÃ¬m á»©ng viÃªn phÃ¹ há»£p cho báº¡n,!',
                description3: 'Náº¿u gáº·p khÃ³ khÄn thÃ¬ báº¡n gá»i vÃ o sá» 0968 269 860 Äá» ÄÆ°á»£c há» trá»£ nhÃ©!',
                calltoaction: 'ÄÄng viá»c!',
                linktoaction: CONFIG.WEBURL,
                description4: ''
            }
            sendNotification(user, mail, {letter: true, web: true, messenger: true, mobile: true})

        }
    }
}

schedule.scheduleJob({hour: 12, minute: 30, dayOfWeek: 2}, function () {
    checkNotCreate()
});
// ====================================
// URL PARAMETERS =====================
// ====================================


var bodyParser = require('body-parser');
app.use(bodyParser.json()); // support json encoded bodies
app.use(bodyParser.urlencoded({extended: true})); // support encoded bodies

// routes will go here


schedule.scheduleJob({hour: 12, minute: 30}, function () {
});

app.get('/', function (req, res) {
    res.send('Jobo Homepage');
});
app.get('/group', function (req, res) {
    res.send(groupData);
});

app.post('/like', function (req, res, next) {
    let likeData = req.body
    console.log(likeData)
    likeActivityRef.child(likeData.actId)
        .update(likeData)
        .then(result => res.send(result))
        .catch(err => res.send(err))
})

app.get('/api/lead', (req, res) => {
    let {
        ref,
        email,
        p: page
    } = req.query;

    var stage = {

        ref: {
            $match: {
                'ref': ref
            }
        },
        email: {
            $match: {
                'email': email
            }
        },
    }
    var pipeline = []
    if (ref) {
        pipeline.push(stage.ref)
    }
    if (email) {
        pipeline.push(stage.email)
    }


    leadCol.aggregate(pipeline, (err, result) => {
        if (err) {
            res.send(err);
        } else {
            var sorded = _.sortBy(result, function (card) {
                return -card.createdAt
            })
            var sendData = getPaginatedItems(sorded, page)
            res.send(sendData)
        }
    })
});

function getPaginatedItemss(collection, query, sort, page = 1, per_page = 15) {
    return new Promise((resolve, reject) => {
        if (!collection) reject('Mongoose collection is required!');

        const offset = (page - 1) * per_page;
        var typesort = {};
        if (sort) {
            typesort[sort] = -1
        } else {
            typesort['createdAt'] = -1
        }
        var cursor = collection.find(query)

        cursor.skip(offset)
            .limit(per_page)
            .sort(typesort)
            .toArray(function (err, posts) {
                if (err) throw err;

                cursor.count()
                    .then(total => resolve({
                        page: page,
                        per_page: per_page,
                        total: total,
                        total_pages: Math.ceil(total / per_page),
                        data: posts
                    }))
                    .catch(err_ => {
                        console.log('Get Pagination Count Error:', err_);
                        reject(err_);
                    });
            });
    });
}

app.get('/api/email', (req, res) => {
    let {
        from,
        headhunter,
        email,
        p: page
    } = req.query;

    var stage = {
        headhunter: {
            $match: {
                'headhunter': true
            }
        },
        from: {
            $match: {
                'from': from
            }
        },
        email: {
            $match: {
                'email': email
            }
        },
    }
    var pipeline = []
    if (headhunter) {
        pipeline.push(stage.headhunter)
    }
    if (from) {
        pipeline.push(stage.from)
    }
    if (email) {
        pipeline.push(stage.email)
    }

    emailChannelCol.aggregate(pipeline, (err, result) => {
        if (err) {
            res.send(err);
        } else {
            var sorded = _.sortBy(result, function (card) {
                return -card.createdAt
            })
            var sendData = getPaginatedItems(sorded, page)
            res.send(sendData)
        }
    })
});

app.get('/api/notification', (req, res) => {
    let {
        title,
        email,
        p: page,
        letter_open,
        letter_click
    } = req.query;


    var pipeline = {}
    if (email) {
        pipeline['userData.email'] = email
    }

    if (title) {
        pipeline['mail.title'] = title
    }
    if (letter_open) {
        pipeline.letter_open = {$ne: null}
    }
    if (letter_click) {
        pipeline.letter_click = {$ne: null}
    }
    console.log(pipeline)
    getPaginatedItemss(notificationCol, pipeline, null, page).then(result => res.send(result))
    // notificationCol.find(pipeline)
    //     .skip(15)
    //     .limit(15)
    //     .sort({'createdAt' : -1}).toArray(function (err, result) {
    //     if (err) throw err;
    //     res.send(result)
    //
    // });

});


function getMongoDB(collection, pipeline = []) {
    return new Promise((resolve, reject) => {
        if (!collection) reject('MongoDB Collection is required!');
        collection.aggregate(pipeline, (err, result) => {
            if (err) reject(err);
            else resolve(result);
        })
    });
}

app.post('/sendEmailMarketing', function (req, res) {
    var query = req.body
    var param = query.newfilter;
    var mail = query.mail;

    const promiseDEmail = new Promise((resolve, reject) => {
        if (param.dataEmail) {
            getMongoDB(emailChannelCol)
                .then(dataEmail => resolve(dataEmail))
                .catch(err => reject(err));
        } else if (param.email) {
            resolve([{email: param.email}])
        } else resolve([])
    });

    const promiseDLead = new Promise((resolve, reject) => {
        if (param.dataLead) {
            getMongoDB(leadCol)
                .then(dataLead => resolve(dataLead))
                .catch(err => reject(err));
        } else resolve([]);
    });

    const promiseUser = new Promise((resolve, reject) => {
        if (param.dataUser) {
            var dataUserArray
            if (param.type) {
                dataUserArray = _.where(dataUser, {type: param.type})
            } else {
                dataUserArray = _.toArray(dataUser)
            }
            resolve(dataUserArray);
        } else resolve([]);
    });

    Promise.all([
        promiseDEmail,
        promiseDLead,
        promiseUser
    ])
        .then(data => {
            console.log(data[0].length, data[1].length, data[2].length)
            var sendingList = [...data[0], ...data[1], ...data[2]];

            if (param.action == 0) {
                console.log('action 0');
                res.send({code: 'view', numberSent: sendingList.length, data: sendingList})
            } else {
                for (var i in sendingList) {
                    var data = sendingList[i]
                    if (!mail.time) {
                        mail.time = Date.now() + 2000
                    } else {
                        mail.time = mail.time + 100
                    }
                    sendNotification(data, mail, null, mail.time)
                }

                res.send({code: 'success', numberSent: sendingList.length, data: sendingList})
            }
        })
        .catch(err => res.status(500).json(err));


})


//
// app.use('/upload', (req, res, next) => {
//     console.log(req.originalUrl);
//     next();
// }, require('./api/routes/index'));

app.get('/api/dashboard', function (req, res) {
    var dashboard = {}
    dashboard.jobseeker = _.where(dataProfile, {feature: true})
    dashboard.employer = _.where(dataStore, {feature: true})
    res.send(JSON.stringify(dashboard,circular()))

})
// function createdUserFromCC() {
//     for (var i in userD) {
//         var a = 0
//         var userDa = userD[i]
//         if (userDa.email) {
//             secondary.auth().createUser({
//                 email: userDa.email,
//                 password: 'tuyendungjobo'
//             }).then(function (userRecord) {
//                 // See the UserRecord reference doc for the contents of userRecord.
//                 console.log("Successfully created new user:", userRecord.uid);
//
//                 var userData = {
//                     type: 2,
//                     phone: userDa.phone,
//                     userId: userRecord.uid,
//                     email: userDa.email,
//                     name: userDa.name,
//                     provider: 'normal',
//                     createdAt: new Date().getTime()
//                 };
//                 userRef.child(userRecord.uid).update(userData)
//                 a++
//                 console.log(a)
//             })
//                 .catch(function (error) {
//                     console.log("Error creating new user:", error);
//                 });
//         }
//
//
//     }
// }

app.get('/createuser', function (req, res) {
    var userId = req.param('uid')
    var email = req.param('email')
    var password = req.param('password')

    secondary.auth().createUser({
        uid: userId,
        email: email,
        password: password,
    }).then(function (userRecord) {
        // See the UserRecord reference doc for the contents of userRecord.
        console.log("Successfully created new user:", userRecord.uid);
        res.send(userRecord)

        var name = 'báº¡n'
        var job = 'nhÃ¢n viÃªn'
        var userData = dataUser[userRecord.uid]
        if (dataUser[userRecord.uid] && dataUser[userRecord.uid].name) {
            name = dataUser[userRecord.uid].name

        }
        if (dataStore[userRecord.uid] && dataStore[userRecord.uid].job) {
            job = getStringJob(dataStore[userRecord.uid].job)
        }
        var mail = {
            title: "ThÃ´ng bÃ¡o ÄÄng tin tuyá»n dá»¥ng",
            preview: "Em ÄÃ£ ÄÄng tin tuyá»n dá»¥ng vá» trÃ­ ' + job + ' cá»§a anh chá» lÃªn web vÃ  app cá»§a Jobo",
            subtitle: '',
            description1: 'ChÃ o ' + name,
            description2: 'Em ÄÃ£ ÄÄng tin tuyá»n dá»¥ng vá» trÃ­ ' + job + ' cá»§a anh chá» lÃªn web vÃ  app cá»§a Jobo - ChuyÃªn viá»c lÃ m PG, lá» tÃ¢n, phá»¥c vá»¥, model',
            description3: 'TÃ i khoáº£n Äá» anh/chá» sá»­ dá»¥ng lÃ : Email:' + userRecord.email + '/ Password: ' + 'tuyendungjobo' + '',
            calltoaction: 'Xem chi tiáº¿t',
            linktoaction: CONFIG.WEBURL + '/view/store/' + userRecord.uid,
            image: ''
        }
        sendNotification(userData, mail, {letter: true, web: true, messenger: true, mobile: true})


    })
        .catch(function (error) {
            console.log("Error creating new user:", error);
            res.send(error)

        });

})


app.get('/verifyemail', function (req, res) {
    var userId = req.param('id')
    userRef.child(userId).update({verifyEmail: true});
    res.send('Báº¡n ÄÃ£ xÃ¡c thá»±c tÃ i khoáº£n thÃ nh cÃ´ng, click vÃ o ÄÃ¢y Äá» tiáº¿p tá»¥c sá»­ dá»¥ng: ' + CONFIG.WEBURL)
    res.redirect(CONFIG.WEBURL)
})

app.get('/api/places', function (req, res) {
    var query = req.param('query')
    var type = req.param('type')

    var url = 'https://maps.googleapis.com/maps/api/place/textsearch/json?query=' + query + '&language=vi&type=' + type + '&components=country:vi&sensor=true&key=' + 'AIzaSyCw7daa2mCBd-LNrxTCzyVf-DiJwUmOpV4' + '&callback=JSON_CALLBACK';

    https.get(url, function (response) {
        var body = '';
        response.on('data', function (chunk) {
            body += chunk;
        });

        response.on('end', function () {
            res.send(body);
        });
    }).on('error', function (e) {
        console.log("Got error: " + e.message);
    });
});

function getRandomJob(industry) {
    if (industry) {
        var random = _.random(0, industry.length - 1)
        console.log('industry[random]', industry, industry[random])
        return industry[random]
    } else {
        return 'sale'
    }

}


app.get('/places', function (req, res) {
    var mylat = req.param('lat') || '10.779942';
    var mylng = req.param('lng') || '106.704354';
    var industry = req.param('industry') || 'restaurant';

    getGoogleJob(mylat, mylng, industry)

});

function getMoreJobEveryDay() {
    var profileD = _.filter(dataProfile, function (card) {
        if (card.address) return true
        else return false
    })
    var sorted = _.sortBy(profileD, function (card) {
        return -card.createdAt
    })
    var profile = sorted[0]
    if (profile) {
        var industry = _.sample(["restaurant", "cafe", "lodging", "store"])
        getGoogleJob(profile.location.lat, profile.location.lng, industry)
    }

}

schedule.scheduleJob({hour: 5, minute: 0}, function () {
    console.log('schedule_getMoreJobEveryDay_run')
    getMoreJobEveryDay()
})

function getGoogleJob(mylat, mylng, industry) {
    if (!mylat || !mylng) return
    if (!industry) industry = _.sample(["restaurant", "cafe", "lodging", "store"])

    var url = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=' + mylat + ',' + mylng + '&type=' + industry + '&radius=50000&key=' + CONFIG.PlaceKey;
    console.log(url);
    var b = 1;
    a();

    function a(nextpage) {
        if (nextpage) {
            url = url + '&pagetoken=' + nextpage
        }
        https.get(url, function (response) {
            var body = '';
            response.on('data', function (chunk) {
                body += chunk;
            });

            response.on('end', function () {
                var bodyObject = JSON.parse(body)
                var storeList = bodyObject.results
                for (var i in storeList) {
                    var storeData = storeList[i]
                    if (!datagoogleJob[storeData.place_id]) {
                        console.log(storeData.name)
                        var ins = null
                        if (storeData.types[0] && jobType[storeData.types[0]]) {
                            ins = storeData.types[0]
                        } else if (storeData.types[1] && jobType[storeData.types[1]]) {
                            ins = storeData.types[1]
                        }
                        storeData.job = getRandomJob(jobType[ins])
                        console.log('storeData.job', storeData.job)
                        if (storeData.photos && storeData.photos[0] && storeData.photos[0].photo_reference) {
                            storeData.avatar = 'https://maps.googleapis.com/maps/api/place/photo?maxwidth=600&photoreference=' + storeData.photos[0].photo_reference + '&key=' + CONFIG.PlaceKey
                        }
                        storeData.location = storeData.geometry.location
                        storeData.address = storeData.vicinity
                        storeData.storeName = storeData.name
                        storeData.jobName = CONFIG.data.job[storeData.job]
                        storeData.industry = ins
                        storeData.createdAt = Date.now() - 86400 * 1000
                        storeData.storeId = storeData.place_id
                        googleJobRef.child(storeData.place_id).update(storeData)
                    } else {
                        console.log('own', storeData.name)
                    }
                }
                if (bodyObject.next_page_token) {
                    b++
                    if (b < 3) {
                        console.log(b)
                        setTimeout(function () {
                            a(bodyObject.next_page_token)
                        }, 4000)
                    }
                }
            });
        }).on('error', function (e) {
            console.log("Got error: " + e.message);
        });
    }
}

app.get('/dash/job', function (req, res) {

    var mylat = req.param('lat')
    var mylng = req.param('lng')

    var joblist = [];
    for (var i in dataJob) {
        var obj = dataJob[i];
        if (dataStore[obj.storeId]) {
            var store = dataStore[obj.storeId];
            var storeData = {
                storeName: store.storeName || '',
                createdBy: store.createdBy,
                avatar: store.avatar,
                industry: store.industry,
                location: store.location,
                address: store.address

            };
            if (dataUser[store.createdBy] && dataUser[store.createdBy].package) {
                storeData.package = dataUser[store.createdBy].package
            }

            var card = Object.assign(obj, storeData);
            if (card.location) {

                var yourlat = card.location.lat;
                var yourlng = card.location.lng;
                var distance = getDistanceFromLatLonInKm(mylat, mylng, yourlat, yourlng);

                if (distance < 100 && card.package == 'premium' && card.deadline > Date.now()) {

                    card.distance = distance
                    joblist.push(card)
                }
            }
        }

    }
    return new Promise(function (resolve, reject) {
        resolve(joblist)
    }).then(function (joblist) {
            var sorded = _.sortBy(joblist, function (card) {
                return -card.createdAt
            });
            res.send(sorded)
        }
    )

});

app.get('/api/job', function (req, res) {

    var newfilter = req.query;
    console.log(newfilter);

    var typefilter = newfilter.type
    var userId = newfilter.userId
    var industryfilter = newfilter.industry
    var jobfilter = newfilter.job
    var working_typefilter = newfilter.working_type
    var salaryfilter = newfilter.salary
    var distancefilter = newfilter.distance
    var apply = newfilter.apply
    var like = newfilter.like

    var sort = newfilter.sort
    var show = newfilter.show
    var page = newfilter.page
    var joblist = []


    return new Promise(function (resolve, reject) {
        if (userId && dataProfile[userId]) {
            var userData = dataProfile[userId];
        }

        if (newfilter.lng && newfilter.lat) {
            var mylat = newfilter.lat;
            var mylng = newfilter.lng;
        } else if (userData && userData.location) {
            var mylat = userData.location.lat;
            var mylng = userData.location.lng;
        }

        console.log('typefilter', typefilter)
        if (typefilter == 'google') {
            console.log('googlejob')
            if (!page || page < 2) {
                getGoogleJob(mylat, mylng, industryfilter)
            }
            for (var i in datagoogleJob) {

                var card = datagoogleJob[i]

                if (card.location && mylng && mylat && distancefilter) {
                    card.distance = getDistanceFromLatLonInKm(mylat, mylng, card.location.lat, card.location.lng);
                }

                if (
                    (card.job == jobfilter || !jobfilter)
                    && (card.distance < 50 || !card.distance)
                    && (card.working_type == working_typefilter || !working_typefilter )
                    && (card.industry == industryfilter || !industryfilter)
                    && (card.salary > salaryfilter || !salaryfilter)
                ) {
                    joblist.push(card)
                }
            }
            resolve(joblist)

        }
        else if (typefilter == 'lead') {

            var stage = {

                ref: {
                    $match: {
                        'ref': newfilter.ref
                    }
                },
                email: {
                    $match: {
                        'email': newfilter.email
                    }
                },
            };
            var pipeline = [];
            if (newfilter.ref) {
                pipeline.push(stage.ref)
            }
            if (newfilter.email) {
                pipeline.push(stage.email)
            }

            leadCol.aggregate(pipeline, (err, result) => {
                if (err) {

                } else {
                    console.log(result.length)
                    resolve(result)
                }
            })

        }
        else if (typefilter == 'marketing') {
            for (var i in dataUser) {

                var user = dataUser[i]
                if (user.type == 1 && user.package != 'premium') {
                    var store = _.findWhere(dataStore, {createdBy: user.userId})
                    var job = _.findWhere(dataJob, {createdBy: user.userId})
                    var card = Object.assign(user, store, job)
                    joblist.push(card)
                }
            }
            resolve(joblist)
        }
        else {
            console.log('primaryJob')
            for (var i in dataJob) {

                var job = dataJob[i]
                if (dataStore[job.storeId] && dataStore[job.storeId].storeName) {

                    var store = dataStore[job.storeId];
                    var user = dataUser[store.createdBy];
                    var stat = dataStatic[job.storeId];

                    var card = Object.assign({},store, user, stat,job);

                    if (sort == "apply") {
                        card.liked = _.where(likeActivity, {storeId: card.storeId, type: 2})
                        card.apply = card.liked.length
                    } else if (sort == "active") {
                        card.like = _.where(likeActivity, {storeId: card.storeId, type: 1})
                        card.active = card.like.length
                    }

                    if (userData) {
                        card.act = _.findWhere(likeActivity, {jobId: card.jobId, userId: userId})
                    }
                    if (mylat && mylng && card.location) {
                        card.distance = getDistanceFromLatLonInKm(mylat, mylng, card.location.lat, card.location.lng);
                    }
                    if (card.package != 'premium') card.package = 'basic';

                    if (
                        (card.job == jobfilter || !jobfilter)
                        && (card.distance < 50 || !card.distance)
                        && (card.working_type == working_typefilter || !working_typefilter )
                        && (card.industry == industryfilter || !industryfilter)
                        && (card.salary > salaryfilter || !salaryfilter)
                        && (card.package == typefilter || !typefilter)
                    ) joblist.push(card)


                }
            }
            resolve(joblist)
        }

    }).then(function (joblist) {
            console.log(joblist.length)
            var sorded;
            if (!sort) {
                sort = 'createdAt'
                newfilter.sort = 'createdAt'
            }

            if (sort == 'viewed' || sort == 'createdAt' || sort == 'apply' || sort == "active") sorded = _.sortBy(joblist, function (card) {
                    return -card[sort]
                });
             else if (sort == 'distance') sorded = _.sortBy(joblist, function (card) {
                    return card[sort]
                })


            var sendData = getPaginatedItems(sorded, page)
            sendData.newfilter = newfilter
            res.send(JSON.stringify(sendData, circular()))
        }
    )

});

app.get('/api/employer', function (req, res) {
    var userId = req.param('userId')
    var jobfilter = req.param('job');
    var industryfilter = req.param('industry');
    var distancefilter = req.param('distance');
    var sort = req.param('sort');

    var page = req.param('p');

    if (!CONFIG.data.job[jobfilter]) {
        jobfilter = ''
    }

    if (dataProfile[userId] && dataProfile[userId].location) {


        var userData = dataProfile[userId];

        var mylat = userData.location.lat;
        var mylng = userData.location.lng;

        var usercard = [];

        for (var i in dataStore) {
            var card = dataStore[i];
            var keyAct = card.storeId + ":" + userId;
            if (card.location
                && !card.hide
                && ((card.industry == industryfilter) || !industryfilter)
                && ((card.job && card.job[jobfilter]) || !jobfilter)
            ) {
                var distance = getDistanceFromLatLonInKm(mylat, mylng, card.location.lat, card.location.lng);
                card.distance = distance;
                if (dataStatic[card.storeId]) {
                    card.viewed = dataStatic[card.storeId].viewed || 0
                    card.rate = (dataStatic[card.storeId].rated || 0) * (dataStatic[card.storeId].rateAverage || 0)
                }

                card.match = 0;


                card.match = card.match + 10 + (+userData.expect_distance || 20) - +distance

                if (card.industry == industryfilter) {
                    card.match = card.match + 20
                }
                if (card.job && card.job[jobfilter]) {
                    card.match = card.match + 30
                }

                if (likeActivity[keyAct]) {
                    card.act = likeActivity[keyAct]
                }

                if (card.match >= 0) {
                    card.match = Math.round(card.match)
                }
                usercard.push(card)

            }


        }
        return new Promise(function (resolve, reject) {
            resolve(usercard)
        }).then(function (usercard) {
                var sorded
                if (sort == 'match' || sort == 'rate' || sort == 'viewed') {
                    sorded = _.sortBy(usercard, function (card) {
                        return -card[sort]
                    })
                    console.log('sort', sort)
                } else if (sort == 'distance') {
                    sorded = _.sortBy(usercard, function (card) {
                        return card[sort]
                    })
                } else {
                    sorded = _.sortBy(usercard, function (card) {
                        return -card.createdAt
                    })
                }
                var sendData = getPaginatedItems(sorded, page)

                res.send(sendData)
            }
        )
    } else {
        res.send('update location')
    }

});

function calculateAge(birthday) { // birthday is a date
    var ageDifMs = Date.now() - new Date(birthday).getTime();
    var ageDate = new Date(ageDifMs); // miliseconds from epoch
    return Math.abs(ageDate.getUTCFullYear() - 1970);
}

app.get('/api/users', function (req, res) {
    var userId = req.param('userId')
    var jobfilter = req.param('job');
    var working_typefilter = req.param('working_type');
    var distancefilter = req.param('distance') || 20;
    var sexfilter = req.param('sex');
    var expfilter = req.param('experience');
    var figurefilter = req.param('figure');
    var langfilter = req.param('languages');
    var age1filter = req.param('age1');
    var age2filter = req.param('age2');

    var urgentfilter = req.param('urgent');
    var adminNotefilter = req.param('note')
    var type = req.param('type')

    var mylng = req.param('lng');
    var mylat = req.param('lat');

    var sort = req.param('sort');
    var page = req.param('p');
    if (!CONFIG.data.job[jobfilter]) {
        jobfilter = ''
    }
    var data = dataProfile
    var usercard = [];
    if (type == 'marketing') {
        data = dataUser
    } else if (type == 'lead') {
        data = dataProfileCC || {}
    }

    for (var i in data) {
        var card = data[i];
        card.match = 0;
        if (!card.hide
            && ((card.job && card.job[jobfilter]) || !jobfilter)
            && ((card.working_type == working_typefilter) || !working_typefilter)
            && ((card.sex == sexfilter) || !sexfilter)
            && ((card.urgent == urgentfilter) || !urgentfilter)
            && (card.experience || !expfilter)
            && (card.figure || !figurefilter)
            && (card.figure || !figurefilter)
            && (card.adminNote || !adminNotefilter)
            && ((card.languages && card.languages[langfilter])|| !langfilter)
            && (!age1filter || (card.birth && calculateAge(card.birth) > age1filter))
            && (!age2filter || (card.birth && calculateAge(card.birth) < age2filter))

        ) {
            if (mylat && mylng && card.location) {

                if (card.expect_distance) distancefilter = card.expect_distance

                var distance = getDistanceFromLatLonInKm(mylat, mylng, card.location.lat, card.location.lng);
                if (distance < distancefilter) {
                    var obj = Object.assign({}, card, dataUser[i])
                    obj.distance = distance;
                    usercard.push(obj)
                }
            } else {
                var obj = Object.assign({}, dataProfile[i], dataUser[i])
                usercard.push(obj)

            }


        }
    }
    return new Promise(function (resolve, reject) {
        resolve(usercard)
    }).then(function (usercard) {
            var sorded
            if (sort == 'match' || sort == 'rate') {
                sorded = _.sortBy(usercard, function (card) {
                    return -card[sort]
                })
                console.log('sort', sort)
            } else if (sort == 'distance') {
                sorded = _.sortBy(usercard, function (card) {
                    return card[sort]
                })
            } else {
                sorded = _.sortBy(usercard, function (card) {
                    return -card.createdAt
                })
            }
            var sendData = getPaginatedItems(sorded, page)

            res.send(sendData)
        }
    )

});

app.get('/on/user', function (req, res) {
    var userId = req.param('userId');
    if (dataUser[userId]) {
        res.send(dataUser[userId])
    } else {
        res.send('NO_DATA')
    }
});

app.get('/on/profile', function (req, res) {
    var userId = req.param('userId');
    if (dataProfile[userId]) {
        var userData = Object.assign({}, dataProfile[userId])
        userData.userInfo = dataUser[userId]
        res.send(userData)
    } else {
        res.send({err: 'No Data'})
    }
});

app.get('/on/job', function (req, res) {
    var jobId = req.param('jobId');
    var jobData = dataJob[jobId]
    const storeId = jobData.storeId
    var storeData = dataStore[storeId]
    var all = Object.assign({}, jobData, {storeData})
    res.send(JSON.stringify(all,circular()))


});
app.get('/on/store', function (req, res) {
    var storeId = req.param('storeId');

    if (dataStore[storeId]) {
        var storeData = dataStore[storeId]
        storeData.jobData = _.where(dataJob, {storeId: storeId});

        res.send(storeData)
    } else {
        res.send('NO_DATA')
    }

});

app.get('/delete/job', function (req, res) {
    var jobId = req.param('jobId')
    if (dataJob[jobId]) {
        var jobData = dataJob[jobId]
        var storeId = jobData.storeId
        var job = jobData.job
        jobRef.child(jobId).remove(function () {
            console.log('delete done')
            storeRef.child(storeId + '/job/' + job).remove(function () {
                res.send({
                    msg: 'delete key in store done',
                    code: 'success'
                })

            })
        })

    } else {
        res.send({
            msg: 'No data',
            code: 'no_data'
        })
    }

});

// app.get('/on/setting', function (req, res) {
//     var userId = req.param('userId')
//     if (dataSetting[userId]) {
//
//         res.send(dataSetting[userId])
//     } else {
//         res.send('NO_DATA')
//     }
// });

app.get('/update/review', function (req, res) {

    var reviewsStr = req.param('reviews')
    if (reviewsStr) {
        var reviews = JSON.parse(reviewsStr)

        res.send({
            msg: 'done',
            code: 'success'
        })
    }
});


app.post('/update/user', function (req, res) {
    var userId = req.param('userId')
    var storeId = req.param('storeId')

    let {user, profile, store} = req.body


    if (userId) {

        if (user) {
            if (dataUser[userId]) {
                //update
                userRef.child(userId).update(user)
            } else {
                userRef.child(userId).update(user)

                //create
                if (user.type == 1) {

                    setTimeout(function () {
                        var mail = {
                            title: 'Jobo_Sale| New employer register',
                            body: JSON.stringify(user),
                            description1: 'Dear friend,',
                            description2: JSON.stringify(user),
                            description3: 'Keep up guys! We can do it <3',
                        }
                        if (userData.phone) {
                            mail.calltoaction = 'Gá»i tÆ° váº¥n';
                            mail.linktoaction = 'tel:' + user.phone;
                        } else {
                            mail.calltoaction = 'Email chÃ o hÃ ng';
                            mail.linktoaction = CONFIG.WEBURL + '/admin/lead';
                        }
                        var time = Date.now()
                        for (var i in dataUser) {
                            if (dataUser[i].admin == true) {
                                time = time + 5000
                                sendNotification(dataUser[i], mail, null, time)
                            }
                        }
                    }, 60000)

                }
            }
        }
        if (profile) {
            profile.updatedAt = Date.now()
            profileRef.child(userId).update(profile)
        }

        res.send({code: 'success', id: userId})

    }
    if (storeId) {
        if (store) {
            if (dataStore[storeId]) {
                //update
                storeRef.child(storeId).update(store)
                res.send({code: 'success', id: storeId})

            } else {
                storeRef.child(storeId).update(store)
                var userD = dataUser[store.createdBy]
                //create
                setTimeout(function () {
                    var mail = {
                        title: 'Jobo_Sale| New Store register',
                        body: JSON.stringify(store),
                        description1: 'Dear friend,',
                        description2: JSON.stringify(store),
                        description3: 'Keep up guys! We can do it <3',
                    }
                    if (user.phone) {
                        mail.calltoaction = 'Gá»i tÆ° váº¥n';
                        mail.linktoaction = 'tel:' + userD.phone;
                    } else {
                        mail.calltoaction = 'Email chÃ o hÃ ng';
                        mail.linktoaction = CONFIG.WEBURL + '/admin/lead';
                    }
                    var time = Date.now()
                    for (var i in dataUser) {
                        if (dataUser[i].admin == true) {
                            time = time + 5000
                            sendNotification(dataUser[i], mail, null, time)
                        }
                    }
                }, 60000)
                res.send({code: 'success', id: storeId})

            }
        }

    }

});

app.post('/update/job', function (req, res) {
    var userId = req.param('userId')
    var {job} = req.body
    if (userId) {

        for (var i in job) {
            var jobData = job[i]

            if (jobData.job) {
                if (!jobData.jobId) {
                    jobData.jobId = 'j' + Math.round(10000 * Math.random());
                }

                if (dataJob[jobData.jobId]) {
                    jobData.updatedAt = Date.now()
                }

                if (!jobData.jobName) {
                    jobData.jobName = Lang[jobData.job]
                }

                jobRef.child(jobData.jobId).update(jobData)

                var dataKey = {}
                dataKey[jobData.jobId] = jobData.jobName;
                storeRef.child(jobData.storeId).child('job').update(dataKey)

            } else {
                console.log('/update/job', jobData.storeId)
            }
        }

    }


    if (dataUser[userId]) {

        res.send(dataUser[userId])
    } else {
        res.send("NO_DATA")

    }

});

app.get('/update/user', function (req, res) {
    var userId = req.param('userId')

    var userDataStr = req.param('user')

    var profileDataStr = req.param('profile')

    var storeId = req.param('storeId')
    var storeDataStr = req.param('store')


    if (userId) {

        if (userDataStr) {
            var userData = JSON.parse(userDataStr);
            if (dataUser[userId]) {
                //update
                userRef.child(userId).update(userData)
            } else {
                userRef.child(userId).update(userData)

                //create
                if (userData.type == 1) {

                    setTimeout(function () {
                        var mail = {
                            title: 'Jobo_Sale| New employer register',
                            body: JSON.stringify(userData),
                            description1: 'Dear friend,',
                            description2: JSON.stringify(userData),
                            description3: 'Keep up guys! We can do it <3',
                        }
                        if (userData.phone) {
                            mail.calltoaction = 'Gá»i tÆ° váº¥n';
                            mail.linktoaction = 'tel:' + userData.phone;
                        } else {
                            mail.calltoaction = 'Email chÃ o hÃ ng';
                            mail.linktoaction = CONFIG.WEBURL + '/admin/lead';
                        }
                        var time = Date.now()
                        for (var i in dataUser) {
                            if (dataUser[i].admin == true) {
                                time = time + 5000
                                sendNotification(dataUser[i], mail, null, time)
                            }
                        }
                    }, 60000)

                }
            }
        }
        if (profileDataStr) {
            var profileData = JSON.parse(profileDataStr)

            profileData.updatedAt = Date.now()
            profileRef.child(userId).update(profileData)


        }

        if (storeDataStr) {
            var storeData = JSON.parse(storeDataStr)
            if (dataStore[storeId]) {
                //update
                storeRef.child(storeId).update(storeData)
            } else {
                storeRef.child(storeId).update(storeData)
                var user = dataUser[storeData.createdBy]
                storeData.userData = user
                //create
                setTimeout(function () {
                    var mail = {
                        title: 'Jobo_Sale| New Store register',
                        body: JSON.stringify(storeData),
                        description1: 'Dear friend,',
                        description2: JSON.stringify(storeData),
                        description3: 'Keep up guys! We can do it <3',
                    }
                    if (user.phone) {
                        mail.calltoaction = 'Gá»i tÆ° váº¥n';
                        mail.linktoaction = 'tel:' + user.phone;
                    } else {
                        mail.calltoaction = 'Email chÃ o hÃ ng';
                        mail.linktoaction = CONFIG.WEBURL + '/admin/lead';
                    }
                    var time = Date.now()
                    for (var i in dataUser) {
                        if (dataUser[i].admin == true) {
                            time = time + 5000
                            sendNotification(dataUser[i], mail, null, time)
                        }
                    }
                }, 60000)

            }
        }

        res.send({code: 'success', id: userId})

    }

});


app.get('/update/job', function (req, res) {
    var userId = req.param('userId')
    var jobDataStr = req.param('job')
    if (userId) {
        var jobData = JSON.parse(jobDataStr)
        console.log(jobDataStr)

        for (var i in jobData) {
            var job = jobData[i]

            if (job.job) {
                if (!job.jobId) {
                    job.jobId = 'j' + Math.round(10000 * Math.random());
                }

                if (dataJob[job.jobId]) {
                    job.updatedAt = Date.now()
                }

                if (!job.jobName) {
                    job.jobName = Lang[job.job]
                }

                jobRef.child(job.jobId).update(job)

                var dataKey = {}
                dataKey[job.jobId] = job.jobName;
                storeRef.child(job.storeId).child('job').update(dataKey)

            } else {
                console.log('/update/job', job.storeId)
            }
        }

    }


    if (dataUser[userId]) {

        res.send(dataUser[userId])
    } else {
        res.send("NO_DATA")

    }

});

app.post('/update/lead', function (req, res) {
    var lead = req.body
    var storeId = req.param('storeId')

    if (storeId) {
        leadCol.findOneAndUpdate({storeId}, {
            $set: {adminNote: lead.adminNote}
        }).then(resutl => res.send({code: 'success', id: lead.storeId}))
    } else {
        if (lead) {
            console.log(lead)
            lead.storeId = createKey(lead.storeName)
            leadCol.insert(lead, function (err, data) {
                if (err) {
                    console.log(err)
                    res.status(500).json(err)
                } else {
                    res.send({code: 'success', id: lead.storeId})
                }
            })
        }
    }


});

function latinese(str) {
    if (str) {
        var defaultDiacriticsRemovalMap = [
            {
                'base': 'A',
                'letters': /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g
            },
            {'base': 'AA', 'letters': /[\uA732]/g},
            {'base': 'AE', 'letters': /[\u00C6\u01FC\u01E2]/g},
            {'base': 'AO', 'letters': /[\uA734]/g},
            {'base': 'AU', 'letters': /[\uA736]/g},
            {'base': 'AV', 'letters': /[\uA738\uA73A]/g},
            {'base': 'AY', 'letters': /[\uA73C]/g},
            {'base': 'B', 'letters': /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},
            {
                'base': 'C',
                'letters': /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g
            },
            {
                'base': 'D',
                'letters': /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g
            },
            {'base': 'DZ', 'letters': /[\u01F1\u01C4]/g},
            {'base': 'Dz', 'letters': /[\u01F2\u01C5]/g},
            {
                'base': 'E',
                'letters': /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g
            },
            {'base': 'F', 'letters': /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},
            {
                'base': 'G',
                'letters': /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g
            },
            {
                'base': 'H',
                'letters': /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g
            },
            {
                'base': 'I',
                'letters': /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g
            },
            {'base': 'J', 'letters': /[\u004A\u24BF\uFF2A\u0134\u0248]/g},
            {
                'base': 'K',
                'letters': /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g
            },
            {
                'base': 'L',
                'letters': /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g
            },
            {'base': 'LJ', 'letters': /[\u01C7]/g},
            {'base': 'Lj', 'letters': /[\u01C8]/g},
            {'base': 'M', 'letters': /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},
            {
                'base': 'N',
                'letters': /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g
            },
            {'base': 'NJ', 'letters': /[\u01CA]/g},
            {'base': 'Nj', 'letters': /[\u01CB]/g},
            {
                'base': 'O',
                'letters': /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g
            },
            {'base': 'OI', 'letters': /[\u01A2]/g},
            {'base': 'OO', 'letters': /[\uA74E]/g},
            {'base': 'OU', 'letters': /[\u0222]/g},
            {'base': 'P', 'letters': /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},
            {'base': 'Q', 'letters': /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},
            {
                'base': 'R',
                'letters': /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g
            },
            {
                'base': 'S',
                'letters': /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g
            },
            {
                'base': 'T',
                'letters': /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g
            },
            {'base': 'TZ', 'letters': /[\uA728]/g},
            {
                'base': 'U',
                'letters': /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g
            },
            {'base': 'V', 'letters': /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},
            {'base': 'VY', 'letters': /[\uA760]/g},
            {'base': 'W', 'letters': /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},
            {'base': 'X', 'letters': /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},
            {
                'base': 'Y',
                'letters': /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g
            },
            {
                'base': 'Z',
                'letters': /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g
            },
            {
                'base': 'a',
                'letters': /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g
            },
            {'base': 'aa', 'letters': /[\uA733]/g},
            {'base': 'ae', 'letters': /[\u00E6\u01FD\u01E3]/g},
            {'base': 'ao', 'letters': /[\uA735]/g},
            {'base': 'au', 'letters': /[\uA737]/g},
            {'base': 'av', 'letters': /[\uA739\uA73B]/g},
            {'base': 'ay', 'letters': /[\uA73D]/g},
            {'base': 'b', 'letters': /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},
            {
                'base': 'c',
                'letters': /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g
            },
            {
                'base': 'd',
                'letters': /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g
            },
            {'base': 'dz', 'letters': /[\u01F3\u01C6]/g},
            {
                'base': 'e',
                'letters': /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g
            },
            {'base': 'f', 'letters': /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},
            {
                'base': 'g',
                'letters': /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g
            },
            {
                'base': 'h',
                'letters': /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g
            },
            {'base': 'hv', 'letters': /[\u0195]/g},
            {
                'base': 'i',
                'letters': /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g
            },
            {'base': 'j', 'letters': /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},
            {
                'base': 'k',
                'letters': /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g
            },
            {
                'base': 'l',
                'letters': /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g
            },
            {'base': 'lj', 'letters': /[\u01C9]/g},
            {'base': 'm', 'letters': /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},
            {
                'base': 'n',
                'letters': /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g
            },
            {'base': 'nj', 'letters': /[\u01CC]/g},
            {
                'base': 'o',
                'letters': /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g
            },
            {'base': 'oi', 'letters': /[\u01A3]/g},
            {'base': 'ou', 'letters': /[\u0223]/g},
            {'base': 'oo', 'letters': /[\uA74F]/g},
            {'base': 'p', 'letters': /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},
            {'base': 'q', 'letters': /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},
            {
                'base': 'r',
                'letters': /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g
            },
            {
                'base': 's',
                'letters': /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g
            },
            {
                'base': 't',
                'letters': /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g
            },
            {'base': 'tz', 'letters': /[\uA729]/g},
            {
                'base': 'u',
                'letters': /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g
            },
            {'base': 'v', 'letters': /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},
            {'base': 'vy', 'letters': /[\uA761]/g},
            {'base': 'w', 'letters': /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},
            {'base': 'x', 'letters': /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},
            {
                'base': 'y',
                'letters': /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g
            },
            {
                'base': 'z',
                'letters': /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g
            }
        ];

        for (var i = 0; i < defaultDiacriticsRemovalMap.length; i++) {
            str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);
        }
        var split = str.split(' ')
        var n = split.length
        var text = ''
        for (var i in split) {
            text = text + split[i]
        }
        return text;
    } else {
        return ''
    }

}

function keygen() {

    const alphabet = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' // chars that can be safely used in urls
    const keylen = 6

    let key = ''
    for (let i = 0; i < keylen; i += 1) {
        key += alphabet[_.random(0, alphabet.length - 1)]
    }
    return key
}

function createKey(fullname) {
    if (fullname) {
        var keyname = latinese(fullname)
        if (keyListData[keyname]) {

            var newname = keyname + _.random(0, 100)
            var obj = {}
            obj[newname] = true
            db.ref('keyList').update(obj, function (suc) {
                console.log('done', suc)
            })
            return newname
        } else {
            var obj = {}
            obj[keyname] = true
            db.ref('keyList').update(obj, function (suc) {
                console.log('done', suc)
            })
            return keyname

        }
    } else {
        return _.random(0, 10000)
    }
}


app.post('/update/log', function (req, res) {
        var userId = req.param('userId')
        var key = req.param('key')
        var log = req.body


        if (userId && log) {
            logCol.insert(log, function (err, data) {
                if (err) {
                    res.status(500).json({err})
                } else {
                    res.send({code: 'success'})
                }
            })
        }
        var action = log.action
        if (action == 'createProfile'
            || action == 'createStore'
            || action == 'updateProfile'
            || action == 'updateStore'
            || action == 'viewStore'
            || action == 'viewProfile'
            || action == 'like'
            || action == 'match'
            || action == 'sendMessage'
            || action == 'setInterview'
            || action == 'serviceWorker'
            || action == 'requestPermission'
            || action == 'decline'

        ) {
            actRef.child(key).set(log)
            console.log("Jobo act", log);
        }


    }
);

app.get('/update/log', function (req, res) {
    var userId = req.param('userId')
    var key = req.param('key')
    var log = JSON.parse(req.param('log'))


    if (userId) {
        if (log && key) {
            logRef.child(key).update(log).then(function () {
                res.send('result')
            }, function (err) {
                res.send('err:' + err)

            })

        }
    }
    var action = log.action
    if (action == 'createProfile'
        || action == 'createStore'
        || action == 'updateProfile'
        || action == 'updateStore'
        || action == 'viewStore'
        || action == 'viewProfile'
        || action == 'like'
        || action == 'match'
        || action == 'sendMessage'
        || action == 'setInterview'
        || action == 'serviceWorker'
        || action == 'requestPermission'
        || action == 'decline'

    ) {
        actRef.child(key).set(log)
        console.log("Jobo act", log);
    }


});

app.get('/initData', function (req, res) {
    var userId = req.param('userId')
    var user = {}
    if (dataUser[userId]) {

        user.userData = dataUser[userId]

        if (dataUser[userId].type == 1 && dataUser[userId].currentStore) {
            var storeId = dataUser[userId].currentStore
            user.storeData = dataStore[storeId]
            user.storeList = _.where(dataStore, {createdBy: userId});
            user.reactList = {}
            user.reactList.match = _.where(likeActivity, {storeId: storeId, status: 1});
            user.reactList.like = _.where(likeActivity, {storeId: storeId, status: 0, type: 1});
            user.reactList.liked = _.where(likeActivity, {storeId: storeId, status: 0, type: 2});
        }
        if (dataUser[userId].type == 2) {
            if (dataProfile[userId]) {
                user.userData = Object.assign({}, dataProfile[userId], dataUser[userId]);

            }
            user.reactList = {}
            user.reactList.match = _.where(likeActivity, {userId: userId, status: 1});
            user.reactList.like = _.where(likeActivity, {userId: userId, status: 0, type: 2});
            user.reactList.liked = _.where(likeActivity, {userId: userId, status: 0, type: 1});
        }

        res.send(JSON.stringify(user, circular()))
    } else {
        res.send({err: 'Kiá»m tra láº¡i thÃ´ng tin tÃ i khoáº£n'})
    }
});

app.get('/view/profile', function (req, res) {
    var userId = req.param('userId')
    var profileId = req.param('profileId')
    if (dataProfile[profileId]) {
        var profileData = Object.assign({}, dataProfile[profileId])
        profileData.userInfo = dataUser[profileId]
        profileData.actData = {}
        profileData.actData.match = _.where(likeActivity, {userId: profileId, status: 1});
        profileData.actData.like = _.where(likeActivity, {userId: profileId, status: 0, type: 2});
        profileData.actData.liked = _.where(likeActivity, {userId: profileId, status: 0, type: 1});
        profileData.static = dataStatic[profileId]
        if (userId) profileData.act = _.where(likeActivity, {userId: profileId, storeId: userId});

        res.send(JSON.stringify(profileData, circular()))
    } else {
        res.send({err: 'No data'})

    }

});

app.get('/view/store', function (req, res) {
    var userId = req.param('userId');
    var storeId = req.param('storeId');
    var jobId = req.param('jobId');

    if (dataStore[storeId]) {
        var storeData = dataStore[storeId]
        console.log('storeData', storeData)
        if (storeData.interviewTime) {
            var now = new Date()
            now.setHours(storeData.interviewTime.hour)
            now.setMinutes(0)

            if (storeData.interviewTime.daily) {

                storeData.interviewOption = {
                    1: now.getTime() + 86400 * 1000,
                    2: now.getTime() + 2 * 86400 * 1000,
                    3: now.getTime() + 3 * 86400 * 1000
                }
            } else {
                var daytoset = storeData.interviewTime.day
                var currentDay = new Date().getDay()
                var dis = (daytoset + 7 - currentDay) % 7
                storeData.interviewOption = {
                    1: now.getTime() + dis * 86400 * 1000,
                    2: now.getTime() + dis * 86400 * 1000 + 7 * 86400 * 1000,
                    3: now.getTime() + dis * 86400 * 1000 + 2 * 7 * 86400 * 1000
                }
            }
        }
        storeData.jobData = _.where(dataJob, {storeId: storeId});
        storeData.actData = {}
        storeData.actData.match = _.where(likeActivity, {storeId: storeId, status: 1});
        storeData.actData.like = _.where(likeActivity, {storeId: storeId, status: 0, type: 1});
        storeData.actData.liked = _.where(likeActivity, {storeId: storeId, status: 0, type: 2});
        storeData.static = dataStatic[storeId];

        if (userId) {
            var activityData = _.findWhere(likeActivity, {userId: userId, storeId: storeId, jobId: jobId})
            if (activityData && activityData.actId) {
                storeData.act = activityData
            }
            if (dataUser[userId].admin == true) {
                storeData.adminData = dataUser[storeData.createdBy]
            }
        }
        if (jobId) {
            storeData.currentJobData = Object.assign({}, dataJob[jobId])
        }

        res.send(JSON.stringify(storeData, circular()))
    } else if (datagoogleJob[storeId]) {
        var storeData = datagoogleJob[storeId]
        res.send(JSON.stringify(storeData, circular()))
    } else {
        res.send({code: 'error'})
    }
});

app.get('/log/activity', function (req, res) {
    var page = req.param('page') || 1
    var dataLike = Object.assign({}, likeActivity);
    var sorded = _.sortBy(dataLike, function (card) {
        return -card.likeAt
    });
    var dataAdd = _.map(sorded, function (card) {
        var profileData = Object.assign({}, dataProfile[card.userId])
        card.profile = profileData
        var jobData = Object.assign({}, dataStore[card.storeId], dataJob[card.jobId]);
        card.job = jobData
        return card;
    });
    var cards = getPaginatedItems(dataAdd, page);

    res.send(JSON.stringify(cards, circular()))
});

app.get('/log/profile', function (req, res) {
    var page = req.param('page') || 1
    var sorded = _.sortBy(dataProfile, function (card) {
        return -card.createdAt
    });
    var cards = getPaginatedItems(sorded, page);
    res.send(cards)
});

app.get('/log/job', function (req, res) {
    var page = req.param('page') || 1
    var listJob = []
    for (var i in dataJob) {
        var job = dataJob[i]
        if (job.storeId && dataStore[job.storeId] && dataStore[job.storeId].storeName) {
            job.storeName = dataStore[job.storeId].storeName
        } else {
            if (!job.storeId) {
                var a = i.split(':')
                var storeId = a[0]
                jobRef.child(i).update({storeId: storeId})
                console.log('done')
            }
        }
        listJob.push(job)

    }
    return new Promise(function (resolve, reject) {
        resolve(listJob)
    }).then(function (listJob) {
        var sorded = _.sortBy(listJob, function (card) {
            return -card.createdAt
        });
        var cards = getPaginatedItems(sorded, page);
        res.send(cards)
    })

});

app.get('/log/store', function (req, res) {
    var page = req.param('page') || 1
    var sorded = _.sortBy(dataStore, function (card) {
        return -card.createdAt
    });
    var cards = getPaginatedItems(sorded, page);
    res.send(cards)
});

app.get('/log/user', function (req, res) {
    var page = req.param('page') || 1
    var sorded = _.sortBy(dataUser, function (card) {
        return -card.createdAt
    });
    var cards = getPaginatedItems(sorded, page);
    res.send(cards)
});

app.get('/sendverify', function (req, res) {
    var userId = req.param('id');

    if (dataUser[userId]) {
        var userData = dataUser[userId]

        sendVerifyEmail(userData.email, userId, userData.name)

    }
    res.send('sended to' + dataUser[userId].email)


})

app.get('/query', function (req, res) {
    var q = req.param('q');
    var qr = S(q.toLowerCase()).latinise().s
    var result = {
        profile: [],
        store: []
    }
    var a = 0, b = 0;
    if (q) {
        for (var i in dataStore) {
            if (dataStore[i].storeName && S(dataStore[i].storeName.toLowerCase()).latinise().s.match(qr) && a < 6) {
                a++
                result.store.push(dataStore[i])
            }
        }

        for (var i in dataProfile) {
            if ((dataProfile[i].name && S(dataProfile[i].name.toLowerCase()).latinise().s.match(qr) && b < 6)
                || (dataUser[i] && dataUser[i].phone && dataUser[i].phone.toString().match(qr))
                || (dataUser[i] && dataUser[i].email && dataUser[i].email.match(qr))
            ) {
                b++
                result.profile.push(dataProfile[i])
            }
        }
        return new Promise(function (resolve, reject) {
            resolve(result)
        }).then(function (result) {
            res.send(result)
        })
    } else {
        res.send(result)

    }


})

app.get('/checkUser', function (req, res) {
    var q = req.param('q');
    if (q) {
        var qr = S(q.toLowerCase()).latinise().s
        var result = []

        for (var i in dataUser) {
            if ((dataUser[i] && dataUser[i].phone && dataUser[i].phone.toString().match(qr))
                || (dataUser[i] && dataUser[i].email && dataUser[i].email.match(qr))
            ) {
                result.push(dataUser[i])
            }
        }
        return new Promise(function (resolve, reject) {
            resolve(result)
        }).then(function (result) {
            res.send(result)
        })
    } else {
        res.send({
            code: -1,
            msg: 'No query'
        })
    }


})


//admin API

app.get('/admin/createuser', function (req, res) {
    var userId = req.param('uid')
    var email = req.param('uid') + '@jobo.asia'
    var password = req.param('pass')
    secondary.auth().createUser({
        uid: userId,
        email: email,
        password: password
    })
        .then(function (userRecord) {
            // See the UserRecord reference doc for the contents of userRecord.
            console.log("Successfully created new user:", userRecord.uid);
            var userData = {
                userId: userRecord.uid,
                name: userRecord.uid,
                email: email,
                createdAt: new Date().getTime(),
                type: 1,
                admin: true
            };
            userRef.child(userRecord.uid).update(userData)
            res.send(userRecord)
        })
        .catch(function (error) {
            console.log("Error creating new user:", error);
            res.send(error)

        });
})


app.get('/admin/storeEmail', function (req, res) {
    var send = ''
    for (var i in dataUser) {
        if (dataUser[i].type == 1 && dataUser[i].email) {
            send = send + dataUser[i].email + '\n'
        }
    }
    res.send(send)
})

app.get('/config', function (req, res) {
    res.send(CONFIG)
})
app.get('/lang', function (req, res) {
    res.send(Lang)
})


function getPaginatedItems(items, page) {
    var page = page || 1,
        per_page = 15,
        offset = (page - 1) * per_page,
        paginatedItems = _.rest(items, offset).slice(0, per_page);
    return {
        page: page,
        per_page: per_page,
        total: items.length,
        total_pages: Math.ceil(items.length / per_page),
        data: paginatedItems
    };
}

function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
    var R = 6371; // Radius of the earth in km
    var dLat = deg2rad(Number(lat2) - Number(lat1));  // deg2rad below
    var dLon = deg2rad(Number(lon2) - Number(lon1));
    var a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2)
    ;
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var x = R * c; // Distance in km
    var n = parseFloat(x);
    x = Math.round(n * 10) / 10;
    return Number(x);
}

function deg2rad(deg) {
    return deg * (Math.PI / 180)
}

function getLastName(fullname) {
    if (fullname) {
        var str = fullname;
        var LastName;
        var res = str.split(" ");
        var resNumber = res.length;
        var resLast = +resNumber - 1
        LastName = res[resLast]
        return LastName
    } else {
        return 'báº¡n'
    }
}

function getStringJob(listJob) {
    var stringJob = '';
    for (var i in listJob) {
        if (Lang[i]) {
            stringJob += Lang[i] + ', '
        }
    }
    if (stringJob.length > 1) {
        var lengaf = stringJob.length - 2
        var resJob = stringJob.substr(0, lengaf);
        return resJob
    } else {
        return ' '
    }
}

function addCountJob(storeId, userId, job) {
    var jobData = dataJob[storeId]
    for (var key in job) {
        var jobdetail = jobData[key]
        if (!jobdetail.apply) {
            jobdetail.apply = {}
        }
        jobdetail.apply[userId] = true
    }
    console.log(JSON.stringify(jobData))
}

function countAllPoint(a) {
    if (a) {

        return (a.viewed || 0) * 1 + (a.liked || 0) * 4 + (a.shared || 0 ) * 3 + (a.rated || 0) * (a.rateAverage || 0) * 2 + (a.matched || 0) * 8 + (a.chated || 0) * 4 + (a.like || 0) * 2 + (a.share || 0) * 2 + (a.rate || 0) * 2 + (a.match || 0) * 3 + (a.chat || 0) * 2 + (a.timeOnline || 0) + (a.login || 0) * 3 + (a.profile || 0)
    } else {
        return 0
    }
}

function checkProfilePoint(profileData) {
    var point = 0
    if (profileData.location) {
        point = point + 2
    }
    if (profileData.avatar) {
        point = point + 4
    }
    if (profileData.birth) {
        point = point + 1
    }
    if (profileData.expect_salary) {
        point = point + 2
    }

    if (profileData.address) {
        point = point + 2
    }

    if (profileData.experience) {
        var time = 0
        for (var i in profileData.experience) {

            var card = profileData.experience[i]
            if (card.end == true) {
                card.end = new Date().getTime()
            }
            if (card.end && card.start) {
                time = time + new Date(card.end).getTime() - new Date(card.start).getTime()
            }
        }
        var month = time / (1000 * 60 * 60 * 24 * 30)
        if (month < 24) {
            point = point + month
        } else if (month > 24) {
            point = point + 24 + month / 5

        }

    }
    if (profileData.figure) {

        point = point + 2

    }

    if (profileData.height == profileData.height / 1) {

        point = point + +profileData.height / 100

    }
    if (profileData.weight) {

        point = point + 1

    }


    if (profileData.languages) {

        point = point + +Object.keys(profileData.languages).length * 3

    }

    if (profileData.name) {

        point = point + 1

    }

    if (profileData.photo) {

        point = point + +Object.keys(profileData.photo).length * 3

    }

    if (profileData.urgent) {

        point = point + +profileData.urgent * 5

    }

    if (profileData.feature) {

        point = point + 10

    }

    if (profileData.videourl) {

        point = point + 20

    }

    if (profileData.time) {

        point = point + 2

    }

    return Math.round(point)
}

function gct(userId) {
    if (dataUser[userId] && dataUser[userId].currentStore) return dataUser[userId].currentStore
}


function addDateToJob(ref) {
    if (ref) {
        db.ref(ref).once('value', function (snap) {
            var jobSnap = snap.val()
            if (jobSnap && !jobSnap.createdAt) {
                db.ref(ref).update({createdAt: new Date().getTime()})
            }
        })
    }

}


app.get('/sendFirstEmailToTotalStore', function (req, res) {

    sendFirstEmailToTotalStore()
    res.send('done')
})

function sendFirstEmailToTotalStore() {
    var listEmployer = _.where(dataUser, {type: 1})
    var a = 0
    var send = 0
    var s = 0

    function loop() {
        var userId = listEmployer[a].userId;
        var storeId = listEmployer[a].currentStore;
        sendWelcomeEmailToStore(storeId, userId)
        s++
        console.log(s)
        a++

        if (send == 0) {
            loop()
        } else if (a < listEmployer.length) {
            setTimeout(function () {
                loop()
            }, 1000)
        }
    }

    loop()

}


app.get('/initStore', function (req, res) {
    var storeId = req.param('storeId');
    var jobId = req.param('jobId');

    var storeData = dataStore[storeId]

    sendWelcomeEmailToStore(storeId)
    if (storeData.job) {
        setTimeout(function () {
            sendStoretoPage(storeId)
        }, 5000);
        setTimeout(function () {
            PostStore(storeId, jobId)
        }, 10000);
        setTimeout(function () {
            sendNotiNewJobSubcribleToProfile(jobId)
        }, 20000)
    }
    res.send('done')
})

function startList() {
    console.log('startList')


    actRef.on('child_added', function (snap) {
        var key = snap.key
        var card = snap.val();

        if (card.userId && card.userId.length > 1 && card.userId.indexOf('.') == -1) {
            run(card, key)
        } else {
            console.log('cannt listen', key)
            actRef.child(key).remove()
        }
    });


    function run(card, key) {


        //save static for each store and profile


        /**
         * Track View
         */

        if (card.action == 'trackView') {
            actRef.child(key).remove()
        }

        /**
         * serviceWorker
         */

        if (card.action == 'serviceWorker') {
            actRef.child(key).remove()
        }

        /**
         * show_video
         */

        if (card.action == 'show_video') {
            actRef.child(key).remove()
        }

        /**
         * getToken
         */
        if (card.action == 'getToken') {
            actRef.child(key).remove()
        }


        /**
         * requestPermission
         */
        if (card.action == 'requestPermission') {
            actRef.child(key).remove()
        }

        /**
         * Create Profile
         */


        if (card.action == 'createProfile') {
            console.log(card)
            if (dataProfile && card.userId && dataProfile[card.userId]) {

                var userData = Object.assign({}, dataProfile[card.userId])
                var name = userData.name || 'báº¡n';
                var userId = card.userId
                staticRef.child(card.userId).update(staticData);

                if (!userData.createdAt) {
                    profileRef.child(card.userId).update({createdAt: new Date().getTime()})
                }
                if (!userData.userId) {
                    profileRef.child(card.userId).update({userId: card.userId})
                }

                if (dataUser[card.userId] && dataUser[card.userId].email) {
                    var email = dataUser[card.userId].email

                    sendVerifyEmail(email, userId, name)

                    setTimeout(function () {
                        sendWelcomeEmailToProfile(dataUser[card.userId], userData)

                        actRef.child(key).remove()

                    }, 50000)
                } else {
                    console.log('createProfile error email ' + card.userId)

                }


            } else {
                console.log('createProfile error ' + card.userId)
                actRef.child(key).remove()

            }


        }

        /**
         * Create Store
         */


        if (card.action == 'createStore') {
            console.log('createStore', card.userId, card.id, card.data.storeId);
            if (dataUser[card.userId] && card.data && card.data.storeId) {

                var employerData = dataUser[card.userId]
                var storeData = dataStore[card.data.storeId]
                var storeId = card.data.storeId
                if (!employerData.currentStore) {
                    userRef.child(card.userId).update({currentStore: storeId})
                }
                if (!storeData.storeId) {
                    storeRef.child(employerData.currentStore).update({storeId: card.data.storeId})
                }
                staticRef.child(storeId).update(staticData);
                if (!storeData.createdAt) {
                    storeRef.child(storeId).update({createdAt: new Date().getTime()})
                }
                if (!storeData.createdBy) {
                    storeRef.child(storeId).update({createdBy: userId})
                }
                var name = employerData.name || 'báº¡n'
                var email = dataUser[card.userId].email
                var userId = card.userId
                sendVerifyEmail(employerData)
                for (var i in dataJob) {
                    var jobData = dataJob[i]
                    if (jobData.storeId == storeId) {
                        addDateToJob('job/' + i)

                        if (!jobData.deadline) {
                            console.log('checkInadequateStoreIdInJob_deadline', i)
                            jobRef.child(i).update({deadline: new Date().getTime() + 1000 * 60 * 60 * 24 * 7})
                        }
                        if (!jobData.createdBy) {
                            jobRef.child(i).update({createdBy: userId})
                        }
                        if (!jobData.jobName) {
                            jobRef.child(i).update({jobName: CONFIG.data.job[jobData.job]})
                        }
                    }

                }

                sendWelcomeEmailToStore(storeId)
                if (storeData.job) {
                    setTimeout(function () {
                        sendStoretoPage(storeId)
                    }, 5000)
                    setTimeout(function () {
                        PostStore(storeId)
                    }, 10000)
                    setTimeout(function () {
                        sendNotiSubcribleToProfile(storeId)
                    }, 20000)
                }
                console.log('done')
                actRef.child(key).remove()
            } else {
                if (!dataUser[card.userId]) {

                    console.log('no user', card.userId)

                } else if (!card.data || !card.data.storeId) {
                    var storeDataList = _.where(dataStore, {createdBy: card.userId})
                    if (storeDataList.length > 0) {
                        var storeData = storeDataList[0]
                        var storeId = storeData.storeId
                        if (storeId) {
                            var userData = dataUser[card.userId]
                            var userId = card.userId
                            sendVerifyEmail(userData.email, userId, userData.name)
                            for (var i in dataJob) {
                                var jobData = dataJob[i]
                                if (jobData.storeId == storeId) {
                                    addDateToJob('job/' + i)

                                    if (!jobData.deadline) {
                                        console.log('checkInadequateStoreIdInJob_deadline', i)
                                        jobRef.child(i).update({deadline: new Date().getTime() + 1000 * 60 * 60 * 24 * 7})
                                    }
                                    if (!jobData.createdBy) {
                                        jobRef.child(i).update({createdBy: userId})
                                    }
                                    if (!jobData.jobName) {

                                        jobRef.child(i).update({jobName: CONFIG.data.job[jobData.job]})
                                    }
                                }

                            }

                            sendWelcomeEmailToStore(storeId)
                            if (storeData.job) {
                                setTimeout(function () {
                                    sendStoretoPage(storeId)
                                }, 5000)
                                setTimeout(function () {
                                    PostStore(storeId)
                                }, 10000)
                                setTimeout(function () {
                                    sendNotiSubcribleToProfile(storeId)
                                }, 20000)
                            }

                            actRef.child(key).remove()
                        }
                    }
                }
            }

        }
        /**
         * Update Profile
         */

        if (card.action == 'updateProfile') {
            if (dataProfile[card.userId]) {
                staticRef.child(card.userId).update({profile: checkProfilePoint(card.userId)})
                var userData = Object.assign({}, dataProfile[card.userId])
                if (userData.expect_salary) {
                    if (userData.expect_salary > 10) {
                        var res = userData.expect_salary.toString().charAt(0);
                        var x = Number(res)
                        profileRef.child(card.userId).update({expect_salary: x})
                    }
                }
                if (!userData.userId) {
                    profileRef.child(card.userId).update({userId: card.userId})
                }
                if (dataProfile[card.userId].avatar && dataProfile[card.userId].name) {
                    for (var i in likeActivity) {
                        if (likeActivity[i].userId == card.userId) {
                            likeActivityRef.child(i).update({
                                userAvatar: dataProfile[card.userId].avatar,
                                name: dataProfile[card.userId].name
                            })
                        }
                    }

                }

                actRef.child(key).remove()
            }
        }
        /**
         * Update Store
         */

        if (card.action == 'updateStore') {
            var employerData = dataUser[card.userId]
            if (employerData && employerData.currentStore) {
                var storeData = dataStore[employerData.currentStore]
                for (var i in storeData.job) {
                    addDateToJob('job/' + storeData.storeId + ':' + i)
                    var jobData = dataJob[storeData.storeId + ':' + i]
                    if (jobData) {
                        if (!jobData.createdBy) {

                            jobRef.child(i).update({createdBy: card.userId})
                        }
                        if (!jobData.jobName) {
                            if (jobData.job && CONFIG.data.job[jobData.job]) {
                                jobRef.child(i).update({jobName: CONFIG.data.job[jobData.job]})
                            } else {
                                jobRef.child(i).update({jobName: jobData.job})

                            }
                        }

                        if (storeData) {
                            jobData.storeId = storeData.storeId
                            jobData.storeName = storeData.storeName
                        }
                    }
                }

                if (storeData.avatar && storeData.storeName) {
                    for (var i in likeActivity) {
                        if (likeActivity[i].storeId == storeData.storeId) {
                            likeActivityRef.child(i).update({
                                storeAvatar: storeData.avatar,
                                storeName: storeData.storeName
                            })
                        }
                    }

                }


                actRef.child(key).remove()
            }

        }

        /**
         * View Store
         */


        if (card.action == 'viewStore') {
            if (card.data.storeId && dataStatic[card.data.storeId]) {
                var i = dataStatic[card.data.storeId].viewed++
                staticRef.child(card.data.storeId).update({viewed: i})
                actRef.child(key).remove()
            } else {
                actRef.child(key).remove()
            }

        }

        /**
         * like Store
         */

        if (card.action == 'like' && card.data.jobId) {

            var likeData = _.findWhere(likeActivity, {userId: card.userId, jobId: card.data.jobId})
            if (!likeData) {
                actRef.child(key).remove()
                return
            }
            var jobData = dataJob[card.data.jobId]
            var actKey = jobData.storeId + ':' + card.userId + ':' + jobData.jobId

            if (!likeData.actId) {
                likeActivityRef.child(actKey).update({actId: actKey})
            }
            if (!likeData.jobName) {
                likeActivityRef.child(actKey).update({jobName: jobData.jobName})
            }
            setTimeout(function () {
                sendMailNotiLikeToStore(likeData)

                if (dataStatic[jobData.jobId]) {
                    var a = dataStatic[jobData.jobId].liked++
                    staticRef.child(jobData.jobId).update({liked: a || 0})
                }
                if (dataStatic[card.userId]) {
                    var b = dataStatic[card.userId].like++
                    staticRef.child(card.userId).update({like: b || 0})
                }
                actRef.child(key).remove()
            }, 5000)

        }

        /**
         * like Profile
         */

        if (card.action == 'like' && card.data.userId) {
            card.storeId = gct(card.userId)
            var actKey = card.storeId + ':' + card.data.userId
            var likeData = likeActivity[actKey]
            likeActivityRef.child(actKey).update({actId: actKey})
            setTimeout(function () {
                    if (likeData) {
                        sendMailNotiLikeToProfile(likeData)

                        if (dataStatic[card.data.userId]) {
                            var a = dataStatic[card.data.userId].liked++ || 1
                            staticRef.child(card.data.userId).update({liked: a})
                        }
                        if (dataStatic[card.storeId]) {
                            var b = dataStatic[card.storeId].like++
                            staticRef.child(card.storeId).update({like: b})
                        }
                        actRef.child(key).remove()

                    } else {
                        console.log('like error', actKey)
                        likeActivityRef.child(actKey).remove()
                        actRef.child(key).remove()
                    }
                }
                ,
                5000
            )


        }

        /**
         * Send Message
         */
        if (card.action == 'sendMessage') {
            if (card.data) {
                if (card.data.type == 0) {
                    if (dataStore[card.data.sender] && dataProfile[card.data.to]) {
                        var notification = {
                            title: 'Tin nháº¯n má»i tá»« ' + dataStore[card.data.sender].storeName,
                            body: card.data.text,
                            description1: 'ChÃ o ' + getLastName(dataProfile[card.data.to].name),
                            description2: dataStore[card.data.sender].storeName + ' : ' + card.data.text,
                            description3: '',
                            calltoaction: 'Tráº£ lá»i!',
                            linktoaction: CONFIG.WEBURL + '/view/store/' + card.data.sender,
                            description4: '',
                            image: ''
                        };
                        sendNotification(dataUser[card.data.to], notification, {
                            letter: true,
                            web: true,
                            messenger: true,
                            mobile: true
                        })

                    } else {
                        console.log('error')
                    }
                } else if (card.data.type == 1) {
                    if (dataProfile[card.data.sender] && dataStore[card.data.to]) {
                        var notification = {
                            title: 'Tin nháº¯n má»i tá»« ' + dataProfile[card.data.sender].name,
                            body: card.data.text,
                            description1: 'ChÃ o ' + dataStore[card.data.to].storeName,
                            description2: dataProfile[card.data.sender].name + ' : ' + card.data.text,
                            description3: '',
                            calltoaction: 'Tráº£ lá»i!',
                            linktoaction: CONFIG.WEBURL + '/view/profile/' + card.data.sender,
                            description4: '',
                            image: '',
                            storeId: card.data.to

                        };
                        sendNotification(dataUser[dataStore[card.data.to].createdBy], notification, {
                            letter: true,
                            web: true,
                            messenger: true,
                            mobile: true
                        })
                    } else {
                        console.log('error')
                    }


                } else {
                    console.log('sendMessage', card.userId)
                }
                actRef.child(key).remove()

            } else {
                console.log('sendMessage no Data', card.userId)

            }

        }

        /**
         * View Profile
         */

        if (card.action == 'viewProfile') {
            if (card.data.userId) {
                var i = 1
                if (dataStatic[card.data.userId] && dataStatic[card.data.userId].viewed) {

                    i = dataStatic[card.data.userId].viewed++
                }
                staticRef.child(card.data.userId).update({viewed: i})
                actRef.child(key).remove()


            }
        }

        /**
         * match Profile
         */
        if (card.action == 'match' && card.data.userId) {
            console.log('new match')
            card.storeId = gct(card.userId)
            var actKey = card.storeId + ':' + card.data.userId
            setTimeout(function () {
                console.log(actKey)
                var likeData = likeActivity[actKey]
                console.log(likeData)
                if (likeData) {
                    sendMailNotiMatchToProfile(likeData)

                    if (dataStatic[card.data.userId]) {
                        var a = dataStatic[card.data.userId].matched++ || 1
                        staticRef.child(card.data.userId).update({liked: a})
                    }
                    if (dataStatic[card.storeId]) {
                        var b = dataStatic[card.storeId].match++
                        staticRef.child(card.storeId).update({like: b})
                    }
                    actRef.child(key).remove()

                } else {
                    console.log('don')
                }
            }, 5000)
        }

        /**
         * match Store
         */
        if (card.action == 'match' && card.data.storeId) {
            var actKey = card.data.storeId + ':' + card.userId
            var likeData = likeActivity[actKey]

            setTimeout(function () {
                if (likeData) {
                    sendMailNotiMatchToStore(likeData)

                    actRef.child(key).remove()

                } else {
                    console.log('match Store', card.key)
                }
            }, 5000)
        }


        /**
         * createLead
         */
        if (card.action == 'createLead' && card.data.userId) {
            var storeData = dataStore[card.data.userId]
            var userInfo = dataUser[card.data.userId]
            sendWelcomeEmailToStore(storeData.storeId, userInfo.userId)
            actRef.child(key).remove()
        }

    }
}


/**
 * Mail Setup
 */


function sendVerifyEmail(userData) {
    if (userData.type = 2) {
        var mail = {
            title: 'ChÃºc má»«ng ' + getLastName(userData.name) + ' ÄÃ£ tham gia cá»ng Äá»ng ngÆ°á»i tÃ¬m viá»c cá»§a Jobo',
            body: 'HÃ£y hoÃ n thÃ nh Äáº§y Äá»§ thÃ´ng tin há» sÆ¡ cÃ¡ nhÃ¢n, vÃ  Äáº·t lá»ch háº¹n vá»i Jobo Äá» tiáº¿n hÃ nh phá»ng váº¥n chá»n nhÃ©',
            subtitle: '',
            description1: 'ChÃ o ' + getLastName(userData.name),
            description2: 'Báº¡n hÃ£y nháº¥n vÃ o link bÃªn dÆ°á»i Äá» xÃ¡c thá»©c email',
            calltoaction: 'XÃ¡c thá»±c',
            linktoaction: CONFIG.APIURL + '/verifyemail?id=' + userData.userId,
            description3: 'Link: ' + CONFIG.APIURL + '/verifyemail?id=' + userData.userId,
            image: ''
        };
        sendNotification(userData, mail, {letter: true})
    } else if (userData.type = 1) {
        var mail = {
            title: 'Jobo | XÃ¡c thá»±c Email',
            body: '',
            subtitle: '',
            description1: 'ChÃ o ' + getLastName(userData.name),
            description2: 'Báº¡n hÃ£y nháº¥n vÃ o link bÃªn dÆ°á»i Äá» xÃ¡c thá»©c email',
            calltoaction: 'XÃ¡c thá»±c',
            linktoaction: CONFIG.APIURL + '/verifyemail?id=' + userData.userId,
            description3: 'Link: ' + CONFIG.APIURL + '/verifyemail?id=' + userData.userId,
            image: ''
        };
        sendNotification(userData, mail, {letter: true})
    }


}

function sendWelcomeEmailToProfile(userData, profileData) {
    var mail = {
        title: 'ChÃºc má»«ng ' + getLastName(userData.name || profileData.name) + ' ÄÃ£ tham gia cá»ng Äá»ng ngÆ°á»i tÃ¬m viá»c cá»§a Jobo',
        body: 'HÃ£y hoÃ n thÃ nh Äáº§y Äá»§ thÃ´ng tin há» sÆ¡ cÃ¡ nhÃ¢n, vÃ  Äáº·t lá»ch háº¹n vá»i Jobo Äá» tiáº¿n hÃ nh phá»ng váº¥n chá»n nhÃ©',
        subtitle: '',
        description1: 'ChÃ o ' + getLastName(dataProfile[userData.userId].name),
        description2: 'Báº¡n ÄÃ£ táº¡o há» sÆ¡ thÃ nh cÃ´ng trÃªn Jobo, tiáº¿p theo báº¡n cáº§n Äáº£m báº£o ÄÃ£ hoÃ n thÃ nh Äáº§y Äá»§ thÃ´ng tin há» sÆ¡',
        description3: 'Sau khi hoÃ n thÃ nh xong, hÃ£y gá»i Äiá»n cho chÃºng tÃ´i Äá» Äáº·t lá»ch háº¹n vá»i Jobo, chÃºng tÃ´i sáº½ tÆ° váº¥n, ÄÃ o táº¡o vÃ  giá»i thiá»u viá»c lÃ m phÃ¹ há»£p cho báº¡n',
        calltoaction: 'Gá»i cho chÃºng tÃ´i',
        linktoaction: 'tel:0968269860',
        image: ''
    };
    sendNotification(userData, mail)
}

app.get('/sendWelcomeEmailToStore', function (req, res) {
    var storeId = req.param('storeId')
    var userId = req.param('userId')
    sendWelcomeEmailToStore(storeId, userId)
    res.send(storeId + userId)
})

function sendWelcomeEmailToStore(storeId, userId) {
    var storeData = dataStore[storeId];
    var userInfo
    if (storeData && storeData.createdBy && dataUser[storeData.createdBy]) {
        userInfo = dataUser[storeData.createdBy]
    } else {
        userInfo = dataUser[userId]
    }
    if (!userInfo) return

    if (!storeData.storeName) {
        storeData.storeName = 'Äá»i tÃ¡c'
    }

    var data = {
        email: userInfo.email,
        password: 'tuyendungjobo',
        storeUrl: CONFIG.WEBURL + '/view/store/' + storeData.storeId
    }
    var firstJob = Object.keys(storeData.job)[0]
    if (CONFIG.data.job[firstJob]) {
        data.job = CONFIG.data.job[firstJob]
    } else {
        firstJob = ''
        data.job = 'nhÃ¢n viÃªn'
    }
    var profile = []


    var countsend = 0
    var maxsent = 21

    for (var i in dataProfile) {
        var card = Object.assign({}, dataProfile[i]);
        if (card.location
            && card.avatar
            && card.name
            && ((card.job && card.job[firstJob]) || (!firstJob && card.feature == true))
        ) {
            if (storeData.location) {
                var mylat = storeData.location.lat;
                var mylng = storeData.location.lng;
                var yourlat = card.location.lat;
                var yourlng = card.location.lng;
                var dis = getDistanceFromLatLonInKm(mylat, mylng, yourlat, yourlng)
            }

            var stringJob = getStringJob(card.job)
            console.log(dis)
            if (
                (dis < 20 || !dis)
            ) {
                console.log(card.name)

                profile.push({
                    title: card.name,
                    image: card.avatar,
                    body: stringJob + ' cÃ¡ch ' + dis + ' km',
                    linktoaction: CONFIG.WEBURL + '/view/profile/' + card.userId,
                    calltoaction: 'Tuyá»n'
                })
                countsend++;
            }
            if (countsend == maxsent) {
                break
            }
        }

    }

    return new Promise(function (resolve, reject) {
        resolve(profile)
    }).then(function (profile) {
        var mail = {
            title: 'ChÃ o má»«ng ' + storeData.storeName + ' tuyá»n gáº¥p nhÃ¢n viÃªn trÃªn Jobo',
            body: 'ÄÄng tin miá»n phÃ­, há» sÆ¡ á»©ng viÃªn minh hoáº¡ rÃµ rÃ ng, dá» dÃ ng tuyá»n chá»n trong vÃ i giá»',
            data: profile,
            description1: 'ChÃ o ' + storeData.storeName + '<br> Jobo.asia lÃ  dá»± Ã¡n cung cáº¥p nhÃ¢n viÃªn gáº¥p cho ngÃ nh dá»ch vá»¥ trong vÃ²ng 24h, vá»i mong muá»n giÃºp nhÃ  tuyá»n dá»¥ng tiáº¿t kiá»m thá»i gian Äá» tÃ¬m ÄÆ°á»£c á»©ng viÃªn phÃ¹ há»£p. <br> ChÃºng tÃ´i hiá»n Äang cÃ³ hÆ¡n 12000+ á»©ng viÃªn vÃ  sáºµn sÃ ng cung cáº¥p Äá»§ sá» lÆ°á»£ng á»©ng viÃªn phÃ¹ há»£p vá»i vá» trÃ­ mÃ  Äá»i tÃ¡c cáº§n tuyá»n.<br> <br> <b>CÃ¡c quyá»n lá»£i cá»§a ' + storeData.storeName + ' khi trá» thÃ nh Äá»i tÃ¡c cá»§a JOBO: </b><br> <br> - Cung cáº¥p nhÃ¢n sá»± ngay <b>trong vÃ²ng 24h</b> vÃ  khÃ´ng pháº£i tráº£ phÃ­ Äá»i vá»i cÃ¡c á»©ng viÃªn bá» loáº¡i.<br> - Tá»± Äá»ng ÄÄng tin lÃªn hÆ¡n 20+ group tuyá»n dá»¥ng Facebook, website vá» tinh<br> - Quáº£ng cÃ¡o thÆ°Æ¡ng hiá»u <b>hoÃ n toÃ n miá»n phÃ­</b> trÃªn cÃ¡c kÃªnh truyá»n thÃ´ng vá»i hÆ¡n 200,000 lÆ°á»£t tiáº¿p cáº­n..<br> <br> ChÃºng tÃ´i ráº¥t mong nháº­n ÄÆ°á»£c pháº£n há»i vÃ  xin phÃ©p liÃªn há» láº¡i Äá» giáº£i ÄÃ¡p táº¥t cáº£ cÃ¡c tháº¯c máº¯c.<br> Äá» biáº¿t thÃªm cÃ¡c thÃ´ng tin chi tiáº¿t vá» JOBO â á»¨ng dá»¥ng tuyá»n dá»¥ng nhanh, Äá»i tÃ¡c cÃ³ thá» tham kháº£o file ÄÃ­nh kÃ¨m.<br>DÆ°á»i ÄÃ¢y lÃ  nhá»¯ng á»©ng viÃªn phÃ¹ há»£p vá»i vá» trÃ­ ' + data.job + ' mÃ  Jobo ÄÃ£ tÃ¬m cho Äá»i tÃ¡c. HÃ£y chá»n á»©ng viÃªn nÃ o Äá»i tÃ¡c tháº¥y phÃ¹ há»£p vÃ  gá»i cho chÃºng tÃ´i Äá» tuyá»n á»©ng viÃªn ÄÃ³',
            description4: 'Náº¿u váº«n chÆ°a chá»n ÄÆ°á»£c á»©ng viÃªn phÃ¹ há»£p, Äá»i tÃ¡c hÃ£y truy cáº­p vÃ o web cá»§a jobo Äá» xem thÃªm hÆ¡n +5500 á»©ng viÃªn ná»¯a.</p> <p>TÃ i khoáº£n Äá» sá»­ dá»¥ng lÃ : TÃªn ÄÄng nháº­p: ' + data.email + ' / Password: ' + data.password + '</p> <p>Link truy cáº­p: <a href="' + CONFIG.WEBURL + '">' + CONFIG.WEBURL + '</a><br>Trang thÆ°Æ¡ng hiá»u : <a href=' + data.storeUrl + '>' + storeData.storeName + '</a><br><br>Jobo ráº¥t vinh dá»± ÄÆ°á»£c lÃ m viá»c vá»i Äá»i tÃ¡c!<br>KhÃ¡nh ThÃ´ng - CEO & Founder, Jobo',
            attachments: true,
            outtro: true
        }


        sendNotification(userInfo, mail)
    })
}

function checkMatchJob(jobA, jobB) {
    if (!jobA || !jobB) return false
    var jobMatch = Object.assign({}, jobA, jobB)
    var jobMatchlength = Object.keys(jobMatch).length
    var totalMatchlength = Object.keys(jobA).length + Object.keys(jobB).length
    if (jobMatchlength < totalMatchlength) {
        return true
    } else {
        return false
    }
}

// noti match noti to employer
function sendNotiSubcribleToEmployer(userData) {
    if (userData.avatar && userData.location && userData.job) {
        for (var i in dataStore) {
            var card = dataStore[i];
            if (card.location && card.job) {

                var dis = getDistanceFromLatLonInKm(card.location.lat, card.location.lng, userData.location.lat, userData.location.lng);


                if (dis <= 20 && checkMatchJob(userData.job, card.job)) {
                    var mail = {
                        title: 'Jobo | CÃ³ á»©ng viÃªn má»i phÃ¹ há»£p vá»i báº¡n',
                        body: 'ChÃºng tÃ´i tÃ¬m tháº¥y á»©ng viÃªn ' + userData.name + ' ráº¥t phÃ¹ há»£p vá»i thÆ°Æ¡ng hiá»u cá»§a báº¡n, xem há» sÆ¡ vÃ  tuyá»n ngay!',
                        data: {
                            name: userData.name,
                            avatar: userData.avatar,
                            job: getStringJob(userData.job) + ' cÃ¡ch ' + dis + ' km'
                        },
                        description1: 'ChÃ o cá»­a hÃ ng ' + card.storeName,
                        description2: 'ÄÆ°á»£c biáº¿t thÆ°Æ¡ng hiá»u cá»§a báº¡n váº«n Äang cáº§n tuyá»n nhÃ¢n viÃªn, chÃºng tÃ´i tÃ¬m tháº¥y á»©ng viÃªn ' + userData.name + ' ráº¥t phÃ¹ há»£p vá»i yÃªu cáº§u cá»§a báº¡n, xem há» sÆ¡ vÃ  tuyá»n ngay!',
                        calltoaction: 'Xem há» sÆ¡',
                        linktoaction: CONFIG.WEBURL + '/view/profile/' + userData.userId,
                        image: '',
                        description3: 'Náº¿u báº¡n khÃ´ng thÃ­ch á»©ng viÃªn nÃ y, báº¡n cÃ³ thá» chá»n cÃ¡c á»©ng viÃªn khÃ¡c, chÃºng tÃ´i cÃ³ hÆ¡n 21300 á»©ng viÃªn ÄÆ°á»£c cáº­p nháº­t má»i má»i ngÃ y.',
                        storeId: card.storeId
                    };
                    sendNotification(dataUser[card.createdBy], mail)
                }
            }
        }
    } else {
        console.log('sendNotiSubcribleToEmployer error', userData.userId)
    }

}

app.get('/sendNotiSubcribleToProfile', function (req, res) {
    var storeId = req.param('storeId');

    sendNotiSubcribleToProfile(storeId)

    res.send('done')
})
app.get('/sendNotiNewJobSubcribleToProfile', function (req, res) {
    var jobId = req.param('jobId');
    sendNotiNewJobSubcribleToProfile(jobId).then(a => res.send(a))
})

String.prototype.simplify = function () {
    return this.toLowerCase()
        .replace(/Ã |Ã¡|áº¡|áº£|Ã£|Ã¢|áº§|áº¥|áº­|áº©|áº«|Ä|áº±|áº¯|áº·|áº³|áºµ/g, "a")
        .replace(/Ã¨|Ã©|áº¹|áº»|áº½|Ãª|á»|áº¿|á»|á»|á»/g, "e")
        .replace(/Ã¬|Ã­|á»|á»|Ä©/g, "i")
        .replace(/Ã²|Ã³|á»|á»|Ãµ|Ã´|á»|á»|á»|á»|á»|Æ¡|á»|á»|á»£|á»|á»¡/g, "o")
        .replace(/Ã¹|Ãº|á»¥|á»§|Å©|Æ°|á»«|á»©|á»±|á»­|á»¯/g, "u")
        .replace(/á»³|Ã½|á»µ|á»·|á»¹/g, "y")
        .replace(/Ä/g, "d")
        .replace(/^\-+|\-+$/g, "")
        .replace(/\s/g, '-');
};

function sendNotiNewJobSubcribleToProfile(jobId) {
    return new Promise(function (resolve, reject) {
        var a = 0
        var time = Date.now()
        if (!jobId) return
        var Job = dataJob[jobId]
        var job = Job.job
        var storeId = Job.storeId
        var storeData = dataStore[storeId]
        if (storeData.storeName && storeData.location) {
            for (var i in dataProfile) {
                var card = Object.assign({}, dataProfile[i]);
                if (card.location && card.job && card.job[job]) {
                    var dis = getDistanceFromLatLonInKm(storeData.location.lat, storeData.location.lng, card.location.lat, card.location.lng);
                    if (dis <= 20) {
                        a++
                        var notiId = keygen();
                        var text = createJDStore(storeData.storeId, 0, Job.jobId, notiId, 'default')
                        var title = 'Jobo | ' + storeData.storeName + ' cáº§n tÃ¬m ' + Job.jobName
                        var mail = {
                            title,
                            mailId: title.simplify() + keygen(),
                            body: text,
                            data:
                                [{
                                    title: storeData.storeName,
                                    image: storeData.avatar || '',
                                    body: Job.jobName + ' cÃ¡ch ' + dis + ' km',
                                    calltoaction: 'Xem chi tiáº¿t',
                                    linktoaction: CONFIG.WEBURL + '/view/store/' + storeData.storeId + '?jobId=' + jobId + '#ref=sendNotiNewJobSubcribleToProfile_' + jobId,
                                }],
                            description1: 'Dear ' + getLastName(card.name),
                            description2: text,
                            description4: `Náº¿u cáº§n há»i gÃ¬ thÃ¬ báº¡n cá»© gá»i Äiá»n vÃ o sá» ${CONFIG.contact[isWhere(storeId)].phone}  náº¿u báº¡n muá»n Äi lÃ m ngay nha \n
                       Happy working! \n
                        Tháº£o - Jobo`,
                            outtro: true
                        };
                        time = time + 3000;
                        sendNotification(dataUser[card.userId], mail, null, time, notiId)
                    }
                }
            }
            resolve(a)
        } else {
            console.log('sendNotiSubcribleToProfile error', storeData.storeId)
        }
    })

}


function sendNotiSubcribleToProfile(storeId, jobId) {
    var time = Date.now()

    if (jobId) {
        var Job = dataJob[jobId]
        var job = Job.job
    } else {
        var jobData = _.filter(dataJob, function (card) {
            if (card.storeId == storeId && card.deadline > Date.now()) return true
            else return false
        })
        if (jobData[0]) {
            Job = jobData[0]
            job = Job.job
        }
    }

    var storeData = dataStore[storeId]
    if (storeData.storeName && storeData.job && storeData.location) {
        for (var i in dataProfile) {
            var card = dataProfile[i];
            if (card.location && card.job) {
                var dis = getDistanceFromLatLonInKm(storeData.location.lat, storeData.location.lng, card.location.lat, card.location.lng);
                if (dis <= 20) {
                    var a = _.random(0, 2)
                    var text = '';
                    var title = '';
                    if (a == 0) {
                        title = storeData.storeName + ' tuyá»n dá»¥ng ' + Job.jobName + '\n \n'
                        text = text + 'CÃ³ cÃ´ng viá»c nÃ y khÃ¡ phÃ¹ há»£p vá»i báº¡n nÃ¨ \n'
                        text = text + createJDJob(Job.jobId)
                    } else if (a == 1) {
                        title = storeData.storeName + ' tuyá»n dá»¥ng ' + Job.jobName + '\n \n'
                        text = text + 'âº Vá» trÃ­ cáº§n tuyá»n \n'
                        text = text + createJDJob(Job.jobId)

                    } else {
                        title = storeData.storeName + ' tuyá»n dá»¥ng ' + Job.jobName + '\n \n'
                        text = text + `Hiá»n táº¡i trÃªn Jobo Äang cÃ³ vá» trÃ­ ${Job.jobName} - ${storeData.storeName} Äang cáº§n tuyá»n gáº¥p vÃ  khÃ¡ phÃ¹ há»£p vá»i báº¡n, báº¡n thá»­ xem yÃªu cáº§u chi tiáº¿t vÃ  á»©ng tuyá»n Äá» Äi phá»ng váº¥n nhÃ©!`


                    }
                    if (storeData.photo) {
                        storeData.photo.push(storeData.avatar)
                    } else {
                        storeData.photo = [storeData.avatar]
                    }

                    var randomphoto = _.random(0, storeData.photo.length - 1)

                    var mail = {
                        title: title,
                        body: text,
                        data: [{
                            title: storeData.storeName,
                            image: storeData.photo[randomphoto] || '',
                            body: getStringJob(storeData.job) + ' cÃ¡ch ' + dis + ' km',
                            calltoaction: 'Xem chi tiáº¿t',
                            linktoaction: CONFIG.WEBURL + '/view/store/' + storeData.storeId + '#ref=kt' + a,
                        }],
                        description1: 'Dear ' + getLastName(card.name),
                        description2: text,
                        description4: `Náº¿u cáº§n há»i gÃ¬ thÃ¬ báº¡n cá»© gá»i Äiá»n vÃ o sá» ${CONFIG.contact[isWhere(storeId)].phone} hoáº·c tá»i trá»±c tiáº¿p ${CONFIG.contact[isWhere(storeId)].address} Äá» trao Äá»i cá»¥ thá» hÆ¡n náº¿u báº¡n muá»n Äi lÃ m ngay nha \n
                        Happy working! \n
                        Tháº£o - Jobo`,
                        outtro: true
                    };
                    time = time + 1000
                    sendNotification(dataUser[card.userId], mail, null, time)
                }
            }
        }
    } else {
        console.log('sendNotiSubcribleToProfile error', storeData.storeId)
    }
}

function sendMailNotiLikeToStore(card) {
    if (card) {
        var mail = {
            title: 'á»¨ng viÃªn ' + card.userName + ' vá»«a á»©ng tuyá»n vÃ o thÆ°Æ¡ng hiá»u cá»§a báº¡n',
            body: 'á»¨ng viÃªn ' + card.userName + ' vá»«a má»i á»©ng tuyá»n vá» trÃ­ ' + card.jobName + ', xem há» sÆ¡ vÃ  tuyá»n ngay!',
            data: [{
                title: card.userName,
                image: card.userAvatar,
            }],
            description1: 'ChÃ o cá»­a hÃ ng ' + card.storeName,
            description2: 'á»¨ng viÃªn ' + card.userName + ' vá»«a má»i á»©ng tuyá»n vá» trÃ­ ' + card.jobName + ', xem há» sÆ¡ vÃ  tuyá»n ngay!',
            description3: '',
            image: '',
            calltoaction: 'Xem há» sÆ¡',
            linktoaction: CONFIG.WEBURL + '/view/profile/' + card.userId,
        };
        sendNotification(dataUser[dataStore[card.storeId].createdBy], mail)

    }

}

function sendMailNotiLikeToProfile(card) {

    if (card.jobId && dataJob[card.jobId] && dataJob[card.jobId].jobName) {
        var jobName = 'vÃ o vá» trÃ­' + dataJob[card.jobId].jobName
    } else {
        var jobName = ''
    }

    var mail = {
        title: 'ThÆ°Æ¡ng hiá»u ' + card.storeName + ' vá»«a gá»­i lá»i má»i phá»ng váº¥n cho báº¡n',
        body: card.storeName + ' vá»«a gá»­i lá»i má»i phá»ng váº¥n cho báº¡n' + jobName + ', xem offer vÃ  pháº£n há»i ngay!',
        data: [{
            title: card.storeName,
            image: card.storeAvatar
        }],
        description1: 'ChÃ o ' + getLastName(card.userName),
        description2: card.storeName + ' vá»«a gá»­i lá»i má»i phá»ng váº¥n cho báº¡n ' + jobName + ', xem chi tiáº¿t vÃ  pháº£n há»i ngay!',
        description3: '',
        subtitle: '',
        image: '',
        calltoaction: 'Xem chi tiáº¿t',
        linktoaction: CONFIG.WEBURL + '/view/store/' + card.storeId + '?job=' + card.jobId
    };
    sendNotification(dataUser[card.userId], mail)

}

function sendMailNotiMatchToStore(card) {

    var notification = {
        title: 'á»¨ng viÃªn ' + card.userName + ' ÄÃ£ Äá»ng Ã½ tÆ°Æ¡ng há»£p vá»i thÆ°Æ¡ng hiá»u cá»§a báº¡n',
        body: ' á»¨ng viÃªn ' + card.userName + ' Äá»ng Ã½ vá»i lá»i má»i phá»ng váº¥n vÃ o vá» trÃ­ ' + dataJob[card.jobId].jobName + ', hÃ£y xem thÃ´ng tin liÃªn há» vÃ  gá»i á»©ng viÃªn tá»i phá»ng váº¥n',
        data: {
            avatar: card.userAvatar,
            name: card.userName
        },
        description1: 'ChÃ o thÆ°Æ¡ng hiá»u ' + card.storeName,
        description2: ' á»¨ng viÃªn ' + card.userName + ' Äá»ng Ã½ vá»i lá»i má»i phá»ng váº¥n vÃ o vá» trÃ­ ' + dataJob[card.jobId].jobName + ', hÃ£y xem thÃ´ng tin liÃªn há» vÃ  gá»i á»©ng viÃªn tá»i phá»ng váº¥n',
        description3: '',
        calltoaction: 'LiÃªn há» ngay!',
        linktoaction: '/view/profile/' + card.userId,
        image: '',
        storeId: card.storeId
    }
    sendNotification(dataUser[dataStore[card.storeId].createdBy], notification)

}

function sendMailNotiMatchToProfile(card) {

    var notification = {
        title: 'Báº¡n vÃ  thÆ°Æ¡ng hiá»u ' + card.storeName + ' ÄÃ£ tÆ°Æ¡ng há»£p vá»i nhau',
        body: ' ChÃºc má»«ng, ThÆ°Æ¡ng hiá»u ' + card.storeName + ' ÄÃ£ tÆ°Æ¡ng há»£p vá»i báº¡n, hÃ£y chuáº©n bá» tháº­t kÄ© trÆ°á»c khi tá»i gáº·p nhÃ  tuyá»n dá»¥ng nhÃ©',
        description1: 'ChÃ o ' + getLastName(card.userName),
        description2: 'ChÃºc má»«ng , ThÆ°Æ¡ng hiá»u ' + card.storeName + ' ÄÃ£ tÆ°Æ¡ng há»£p vá»i báº¡n, hÃ£y chuáº©n bá» tháº­t kÄ© trÆ°á»c khi tá»i gáº·p nhÃ  tuyá»n dá»¥ng nhÃ©',
        description3: '',
        calltoaction: 'LiÃªn há» ngay!',
        linktoaction: CONFIG.WEBURL + '/view/store/' + card.storeId,
        description4: '',
        image: ''
    };
    sendNotification(dataUser[card.userId], notification)
}


app.get('/registerheadhunter', function (req, res) {
    var id = req.param('id')
    emailChannelCol.findOneAndUpdate({'id': id}, {headhunter: Date.now()}, {new: true}).then(function (data) {
        if (data) {
            res.send('Báº¡n ÄÃ£ ÄÄng kÃ½ thÃ nh cÃ´ng, hÃ£y sá»­ dá»¥ng mÃ£ giá»i thiá»u: ' + user.email + ' vÃ  chia sáº» link á»©ng tuyá»n cho báº¡n bÃ¨ nhÃ©')

        } else {
            res.send('KhÃ´ng cÃ³ dá»¯ liá»u')

        }
    })

})


// Analytics

function StaticCountingNewUser(dateStart, dateEnd) {
    if (!dateStart) {
        dateStart = 0
    }
    if (!dateEnd) {
        dateEnd = 0
    }
    var total = 0;
    var employer = {
        employer: 0,
        store: 0,
        premium: 0
    };
    var jobseeker = {
        hn: 0,
        sg: 0,
        other: 0,
        hn_ve: 0,
        sg_ve: 0,
        other_ve: 0
    };
    var noEmail = 0;
    var noPhone = 0;
    var noProfile = 0;

    var act = {
        userLikeStore: 0,
        storeLikeUser: 0,
        match: 0,
        success: 0,
        meet: 0,
    }

    var provider = {
        facebook: 0,
        normal: 0
    }

    var lead = {
        total: 0
    }

    for (var i in dataUser) {
        var userData = dataUser[i];
        if (userData.createdAt) {
            if ((userData.createdAt > dateStart || dateStart == 0) && (userData.createdAt < dateEnd || dateEnd == 0)) {
                total++
                if (userData.type == 1) {
                    employer.employer++


                } else if (userData.type == 2) {
                    if (dataProfile && dataProfile[i] && dataProfile[i].location) {
                        var profileData = Object.assign({}, dataProfile[i])
                        var disToHn = getDistanceFromLatLonInKm(profileData.location.lat, profileData.location.lng, CONFIG.address.hn.lat, CONFIG.address.hn.lng)
                        if (disToHn < 100) {
                            jobseeker.hn++
                            if (profileData.verify) {
                                jobseeker.hn_ve++
                            }
                        } else {
                            var disToSg = getDistanceFromLatLonInKm(profileData.location.lat, profileData.location.lng, CONFIG.address.sg.lat, CONFIG.address.sg.lng)
                            if (disToSg < 100) {
                                jobseeker.sg++
                                if (profileData.verify) {
                                    jobseeker.sg_ve++
                                }
                            } else {
                                jobseeker.other++
                                if (profileData.verify) {
                                    jobseeker.other_ve++
                                }
                            }
                        }
                    }
                }
                if (!userData.email) {
                    noEmail++
                }
                if (!userData.phone) {
                    noPhone++
                }
                if (dataProfile && !dataProfile[i]) {
                    noProfile++
                }
                if (userData.provider == 'facebook') {
                    provider.facebook++
                } else if (userData.provider == 'normal') {
                    provider.normal++
                }
            }
        } else {
            console.log('Static_User_No_CreatedAt', i)

        }
    }
    for (var i in dataStore) {
        var storeData = dataStore[i];
        if (storeData.createdAt) {
            if ((storeData.createdAt > dateStart || dateStart == 0) && (storeData.createdAt < dateEnd || dateEnd == 0)) {
                employer.store++
                if (storeData.createdBy
                    && dataUser[storeData.createdBy]
                    && dataUser[storeData.createdBy].package == 'premium') {
                    employer.premium++
                }

            }


        } else {
            console.log('Static_Store_No_CreatedAt', i)
            if (!storeData.storeName) {
                storeRef.child(i).remove(function (a) {
                    console.log('store_Delete')
                })
            }
        }
    }
    for (var i in dataLead) {
        var storeData = dataLead[i];
        if (storeData.createdAt) {
            if ((storeData.createdAt > dateStart || dateStart == 0) && (storeData.createdAt < dateEnd || dateEnd == 0)) {
                lead.total++
                if (!lead[storeData.userId]) {
                    lead[storeData.userId] = 1
                } else {
                    lead[storeData.userId]++
                }
            }
        } else {
            console.log('Static_Lead_No_CreatedAt', i)

        }
    }
    for (var i in likeActivity) {
        var likeData = likeActivity[i];
        if (
            likeData.likeAt &&
            (likeData.likeAt > dateStart || dateStart == 0) &&
            (likeData.likeAt < dateEnd || dateEnd == 0)
        ) {
            if (likeData.type == 2) {
                act.userLikeStore++
            }
            if (likeData.type == 1) {
                act.storeLikeUser++
            }
            if (likeData.status == 1) {
                act.match++
            }
        }
        if (
            likeData.matchedAt &&
            (likeData.matchedAt > dateStart || dateStart == 0) &&
            (likeData.matchedAt < dateEnd || dateEnd == 0)
        ) {
            act.match++
        }

        if (likeData.success &&
            (likeData.success > dateStart || dateStart == 0) &&
            (likeData.success < dateEnd || dateEnd == 0)
        ) {
            act.success++
        }
        if (likeData.meet &&
            (likeData.meet > dateStart || dateStart == 0) &&
            (likeData.meet < dateEnd || dateEnd == 0)) {
            act.meet++
        }
    }

    var googleJob = {today: 0, total: 0}
    for (var i in datagoogleJob) {
        var job = datagoogleJob[i];
        if (
            job.createdAt &&
            (job.createdAt > dateStart || dateStart == 0) &&
            (job.createdAt < dateEnd || dateEnd == 0)
        ) {
            googleJob.today++
        }
        googleJob.total++
    }

    return new Promise(function (resolve, reject) {
        var data = {
            dateStart,
            dateEnd,
            total,
            employer,
            jobseeker,
            noEmail,
            noPhone,
            noProfile,
            provider,
            act,
            lead,
            googleJob
        };
        console.log(data);
        resolve(data)
    })

}


function analyticsRemind() {
    var dateStart = new Date()
    dateStart.setHours(0, 0, 0, 0)
    var datenow = dateStart.getTime()
    var dayy = dateStart.getDate() + '/' + dateStart.getMonth()
    StaticCountingNewUser(datenow, datenow + 86400 * 1000).then(function (data) {
        var long = `Tá»« ${dayy} Äáº¿n ${new Date(data.dateEnd)}: \n Total User: ${data.total} \n <b>Employer:</b>\n - New account: ${data.employer.employer} \n - New store: ${data.employer.store} \n - New premium: ${data.employer.premium}\n <b>Jobseeker:</b>\n - HN: ${data.jobseeker.hn} \n -SG: ${data.jobseeker.sg} \n <b>Operation:</b> \n- á»¨ng viÃªn thÃ nh cÃ´ng: ${data.act.success} \n - á»¨ng viÃªn Äi phá»ng váº¥n:${data.act.meet} \n - LÆ°á»£t á»©ng tuyá»n: ${data.act.userLikeStore} \n - LÆ°á»£t tuyá»n: ${data.act.storeLikeUser} \n - LÆ°á»£t tÆ°Æ¡ng há»£p: ${data.act.match} \n <b>Sale:</b> \n- Lead :\n${JSON.stringify(data.lead)}\n <b>GoogleJob:</b>\n${JSON.stringify(data.googleJob)}`
        var mail = {
            title: dayy + '| Jobo KPI Result ',
            body: long,
            subtitle: '',
            description1: 'Dear friend,',
            description2: long,
            description3: 'Keep up guys! We can do it <3',
            calltoaction: 'Hello the world',
            linktoaction: 'https://www.messenger.com/t/979190235520989',
            image: ''
        }
        var time = Date.now()
        for (var i in dataUser) {
            if (dataUser[i].admin == true) {
                time = time + 5000
                sendNotification(dataUser[i], mail, {letter: true, web: true, messenger: true, mobile: true}, time)
            }
        }
    })
}

app.get('/sendRemind', function (req, res) {
    analyticsRemind();
    res.send('sendRemind done')
})
schedule.scheduleJob({hour: 18, minute: 0}, function () {
    analyticsRemind()
});

app.get('/admin/analyticsUser', function (req, res) {
        var dateStart = new Date()
        dateStart.setHours(0, 0, 0, 0)
        dateStart = dateStart.getTime()
        console.log(dateStart);
        var ObjectData = {}
        var day = 360;
        var i = 0;
        var dateNow = dateStart;
        StaticCountingNewUser().then(function (data) {
            ObjectData.all = data
        });

        function myloop() {
            if (i < day && dateNow > 1482598800000) {
                dateNow = dateStart - 86400 * 1000 * i;
                StaticCountingNewUser(dateNow, dateNow + 86400 * 1000).then(function (data) {
                    ObjectData[dateNow] = data
                    i++
                    myloop()
                })
            } else {
                res.send(ObjectData)
            }
        }

        myloop()
    }
);

app.get('/admin/analytics', function (req, res) {
        checkInadequateProfile().then(function (data) {
            res.send(data)
        })
    }
);

//
// // Remind:
// function ReminderInstallApp() {
//     for (var i in dataUser) {
//         var userData = dataUser[i]
//         if (!userData.mobileToken) {
//             if (userData.type == 1) {
//                 var mail = {
//                     title: "Jobo sáº½ giÃºp báº¡n khÃ´ng bá» lá»¡ nhá»¯ng tÃ i nÄng",
//                     preview: "CÃ i Äáº·t ngay Jobo Äá» tÆ°Æ¡ng tÃ¡c vá»i á»©ng viÃªn tiá»m nÄng",
//                     subtitle: '',
//                     description1: 'Xin chÃ o ' + getLastName(userData.name),
//                     description2: "Báº¡n ÄÃ£ cÃ i Äáº·t Jobo chÆ°a? Náº¿u chÆ°a thÃ¬ hÃ£y nhanh tay lÃªn nhÃ© vÃ  nhá» báº­t thÃ´ng bÃ¡o Äá» Jobo ÄÆ°a tin nhÃ©",
//                     description3: 'TÃ i khoáº£n Äá» anh/chá» sá»­ dá»¥ng lÃ : Email:' + userData.email,
//                     calltoaction: 'Báº¯t Äáº§u cÃ i Äáº·t app vÃ  tÃ¬m kiáº¿m á»©ng viÃªn tiá»m nÄng',
//                     linktoaction: CONFIG.WEBURL + '/go',
//                     image: ''
//                 }
//                 sendNotification(userData, mail, true, true, true)
//             } else if (userData.type == 2) {
//                 var mail = {
//                     title: "HÃ£y Äá» Jobo giÃºp báº¡n tÃ¬m kiáº¿m viá»c lÃ m nhanh hÆ¡n nhÃ©",
//                     preview: "Nhanh tay cÃ i Äáº·t Jobo Äá» tÃ¬m viá»c nhanh nÃ o",
//                     subtitle: '',
//                     description1: 'Xin chÃ o ' + getLastName(userData.name),
//                     description2: "Náº¿u báº¡n lá»t vÃ o máº¯t xanh cá»§a nhÃ  tuyá»n dá»¥ng, chÃºng tÃ´i sáº½ thÃ´ng bÃ¡o cho báº¡n qua email hoáº·c thÃ´ng bÃ¡o Äiá»n thoáº¡i, nhÆ°ng Äá» nhanh hÆ¡n thÃ¬ hÃ£y báº­t thÃ´ng bÃ¡o nhÃ©, cÃ³ viá»c ngay láº­p tá»©c Äáº¥y",
//                     description3: 'TÃ i khoáº£n Äá» báº¡n sá»­ dá»¥ng lÃ : Email: ' + userData.email,
//                     calltoaction: 'Báº¯t Äáº§u tÃ¬m viá»c',
//                     linktoaction: CONFIG.WEBURL + '/go',
//                     image: ''
//                 }
//                 sendNotification(userData, mail, true, true, true)
//             }
//         }
//     }
// }
//
// schedule.scheduleJob({hour: 12, minute: 14, dayOfWeek: 0}, function () {
//     ReminderInstallApp()
// });
//
// function ReminderJobseekerUpdateAvatar() {
//     for (var i in dataProfile) {
//         var profile = dataProfile[i]
//         if (!profile.avatar) {
//             var mail = {
//                 title: "Báº¡n quÃªn cáº­p nháº­t áº£nh Äáº¡i diá»n rá»i nÃ y!",
//                 body: "Dear " + getLastName(profile.name) + " nhanh tay hoÃ n thÃ nh há» sÆ¡ Äi nÃ o, cÃ³ ráº¥t nhiá»u nhÃ  tuyá»n dá»¥ng Äang chá» Äá»£i tÃ i nÄng nhÆ° báº¡n Äáº¥y!",
//                 subtitle: '',
//                 description1: 'Jobo xin chÃ o ' + getLastName(profile.name),
//                 description2: 'Hiá»n táº¡i há» sÆ¡ cá»§a báº¡n Äang thiáº¿u áº£nh Äáº¡i diá»n Äáº¥y, hÃ£y Äá» nhÃ  tuyá»n dá»¥ng tháº¥y ÄÆ°á»£c gÆ°Æ¡ng máº·t Äáº§y tÃ¬m nÄng cá»§a báº¡n nÃ o',
//                 description3: 'NÃ o, nháº¥c Äiá»n thoáº¡i lÃªn vÃ  cáº­p nháº­t anh Äáº¡i diá»n cá»§a báº¡n Äi nÃ o, cÃ³ khÃ³ khÄn gÃ¬ hÃ£y gá»i cho Jobo nhÃ© (0968269860), khÃ³ khÄn gÃ¬ cá»© há»i, ngáº¡i ngÃ¹ng chi ná»¯a ',
//                 calltoaction: 'Cáº­p nháº­t vÃ  gáº·p nhÃ  tuyá»n dá»¥ng nÃ o!',
//                 linktoaction: CONFIG.WEBURL,
//                 description4: ''
//             }
//             var userData = dataUser[i]
//             sendNotification(userData, mail, true, true, true)
//         }
//     }
// }
//
// schedule.scheduleJob({hour: 12, minute: 30, dayOfWeek: 1}, function () {
//     ReminderJobseekerUpdateAvatar()
// })
//
// function ReminderUpdateDeadline() {
//     for (var i in dataJob) {
//         var job = dataJob[i]
//         if (!job.deadline) {
//             var storeData = dataStore[job.storeId]
//             var userData = dataUser[storeData.createdBy]
//             var mail = {
//                 title: "Báº¡n ÄÃ£ tuyá»n Äá»§ nhÃ¢n viÃªn chÆ°a?",
//                 body: "Cáº­p nháº­t láº¡i vá» trÃ­ nhÃ¢n viÃªn giÃºp Jobo nhÃ©!",
//                 subtitle: '',
//                 description1: 'Jobo xin chÃ o ' + storeData.storeName,
//                 description2: 'Cáº­p nháº­t láº¡i thÃ´ng tin vÃ  ngÃ y háº¿t háº¡n Äá» há» trá»£ Jobo giÃºp báº¡n tuyá»n dá»¥ng nhÃ©, nhanh láº¯m!',
//                 description3: 'Sao báº¡n khÃ´ng lÃ m má»t vÃ²ng +4000 há» sÆ¡ Äá» tÃ¬m cho mÃ¬nh má»t nhÃ¢n viÃªn nhá»?!',
//                 calltoaction: 'Cáº­p nháº­t Äá» tÃ¬m á»©ng viÃªn!',
//                 linktoaction: CONFIG.WEBURL,
//                 description4: '',
//             };
//             sendNotification(userData, mail, true, true, true)
//         }
//     }
// }
//
// schedule.scheduleJob({hour: 12, minute: 14, dayOfWeek: 2}, function () {
//     ReminderUpdateDeadline()
// });
//
// function ReminderUpdateExpect_Job() {
//     for (var i in dataProfile) {
//         var profile = dataProfile[i]
//         if (!profile.job) {
//             var userData = dataUser[i]
//             var mail = {
//                 title: "HÃ£y cho Jobo biáº¿t báº¡n Äang cáº§n tÃ¬m viá»c gÃ¬ nÃ o?",
//                 body: "Vá» trÃ­ mong muá»n cá»§a báº¡n nhÆ° tháº¿ nÃ o,  báº­t mÃ­ cho Jobo biáº¿t Äá» Jobo tÃ¬m giÃºp báº¡n nhÃ© !",
//                 subtitle: '',
//                 description1: 'Xin chÃ o ' + getLastName(userData.name),
//                 description2: 'HÃ£y cho Jobo biáº¿t vá» trÃ­ mong muá»n cá»§a báº¡n Äi nÃ o!',
//                 description3: 'ChÃºng ta cÃ¹ng lÆ°á»t hÆ¡n 300 cÃ´ng viá»c xung quanh báº¡n nhÃ©',
//                 calltoaction: 'Xem profile cá»§a báº¡n',
//                 linktoaction: CONFIG.WEBURL + '/view/profile/' + userData.userId,
//                 image: ''
//             };
//             sendNotification(userData, mail, true, true, true)
//         }
//     }
// }
//
// schedule.scheduleJob({hour: 12, minute: 14, dayOfWeek: 4}, function () {
//     ReminderUpdateExpect_Job()
// });
//
//
// function ReminderAvatarUpdate() {
//     for (var i in dataUser) {
//         console.log('start')
//         var userData = dataUser[i]
//         if (userData.userId && dataProfile && dataProfile[userData.userId] && !dataProfile[userData.userId].avatar) {
//             var mail = {
//                 title: "Cáº­p nháº­t áº£nh Äáº¡i diá»n cá»§a báº¡n Äi nÃ o, nhÃ  tuyá»n dá»¥ng Äang chá» kÃ¬a",
//                 body: "CÃ¹ng Jobo cáº­p nháº­t áº£nh Äáº¡i diá»n nhÃ©!",
//                 subtitle: '',
//                 description1: 'Jobo xin chÃ o ' + getLastName(dataProfile[userData.userId].name),
//                 description2: 'CÃ³ ráº¥t nhiá»u nhÃ  tuyá»n dá»¥ng ÄÃ£ xem há» sÆ¡ cá»§a báº¡n nhÆ°ng vÃ¬ báº¡n quÃªn cáº­p nháº­t áº£nh Äáº¡i diá»n nÃªn há» ÄÃ£ lá»¡ máº¥t má»t nhÃ¢n viÃªn tÃ¬m nÄng, xinh Äáº¹p nhÆ° báº¡n rá»i ',
//                 description3: 'CÃ¹ng cáº­p nháº­t áº£nh Äáº¡i diá»n Äá» tÃ¬m viá»c nhÃ©',
//                 calltoaction: 'Báº¯t Äáº§u nÃ o',
//                 linktoaction: CONFIG.WEBURL,
//                 image: ''
//             };
//             sendNotification(userData, mail, true, true, true)
//         }
//     }
// }
//
// schedule.scheduleJob({hour: 12, minute: 14, dayOfWeek: 6}, function () {
//     ReminderAvatarUpdate()
// });
//
// function ReminderCreateProfile() {
//     for (var i in dataUser) {
//         console.log('start')
//         var userData = dataUser[i]
//         if (userData.userId && !dataProfile[i] && userData.type == 2) {
//             var how = ''
//             if (userData.provider == 'facebook') {
//                 how = 'báº±ng tÃ i khoáº£n facebook ' + userData.name + ' (' + userData.email + ')'
//             } else {
//                 how = 'báº±ng tÃ i khoáº£n vá»i Email: ' + userData.email + ' / Password: tuyendungjobo'
//             }
//             var mail = {
//                 title: "Báº¡n muá»n tÃ¬m ÄÆ°á»£c viá»c lÃ m? Chá» cáº§n táº¡o há» sÆ¡ trÃªn Jobo",
//                 body: "Báº¡n chá» cáº§n táº¡o há» sÆ¡, cÃ²n láº¡i cá»© Äá» Jobo lo!",
//                 subtitle: '',
//                 description1: 'Jobo xin chÃ o ' + getLastName(userData.name),
//                 description2: 'Há» sÆ¡ cá»§a báº¡n Äang thiáº¿u thÃ´ng tin ÄÃ³, cÃ¹ng Jobo cáº­p nháº­t vÃ  tÃ¬m nhÃ  tuyá»n dá»¥ng nÃ o',
//                 description3: 'HÃ£y vÃ o app hoáº·c website https://joboapp.com, ÄÄng nháº­p ' + how,
//                 calltoaction: 'Truy cáº­p Jobo',
//                 linktoaction: CONFIG.WEBURL,
//                 image: ''
//             };
//             sendNotification(userData, mail, true, true, true)
//         }
//     }
// }
//
// schedule.scheduleJob({hour: 9, minute: 5, dayOfWeek: 6}, function () {
//     ReminderCreateProfile()
// });

function isWhere(storeId) {
    var storeData = dataStore[storeId]
    if (storeData) {
        var disToHN = getDistanceFromLatLonInKm(storeData.location.lat, storeData.location.lng, CONFIG.address.hn.lat, CONFIG.address.hn.lng)
        var disToSG = getDistanceFromLatLonInKm(storeData.location.lat, storeData.location.lng, CONFIG.address.sg.lat, CONFIG.address.sg.lng)
        if (disToHN < 100) {
            return 'hn'
        } else if (disToSG < 100) {
            return 'hcm'
        }
    } else {
        return 'vn'
    }
}

app.route('/PostFacebook')
    .post(function (req, res) {
        var {text, image, poster, groupId, job, where, time} = req.body;
        console.log('req.body', req.body)
        var content = {text, image}
        PostStore(null, null, groupId, job, where, poster, time, content)
            .then(result => res.status(200).json(result))
            .catch(err => res.status(500).json(err));
    });

app.get('/PostStore', function (req, res) {
    var storeId = req.param('storeId');
    var groupId = req.param('groupId');
    var poster = req.param('poster');
    var job = req.param('job');
    var jobId = req.param('jobId');
    var where = req.param('where');

    PostStore(storeId, jobId, groupId, job, where, poster).then(result => res.send(result))
        .catch(err => res.status(500).json({err}))

});


function PostStore(storeId, jobId, groupId, job, where, poster, time, content) {
    return new Promise((resolve, reject) => {

        if (jobId) {
            var Job = dataJob[jobId]
            job = Job.job
            storeId = Job.storeId
        } else if (storeId) {
            var jobData = _.filter(dataJob, function (card) {
                if (card.storeId == storeId && card.deadline > Date.now()) return true
                else return false
            })

            if (jobData[0]) {
                Job = jobData[0]
                job = Job.job
                jobId = Job.jobId
                storeId = Job.storeId
            } else reject({err:'no job'})
        }
        if (!where && storeId) where = isWhere(storeId)

        if (content) {
            var authenic_content = true
        } else {
            authenic_content = false
        }
        if (poster) {
            var authenic_poster = true

            // var evens = _.filter(facebookUser['vn'], function (num) {
            //     var arr = num.match(poster)
            //     if(arr.length > 0) return true
            //     else return false
            // });
            //
            // if (evens.length > 0) {
            //     poster = _.sample(evens)
            // } else {
            //     reject({err:'no poster'})
            // }

        } else {
            authenic_poster = false
        }
        console.log(storeId, jobId, groupId, job, where, poster, time, content)

        if (groupId) {
            for (var a in groupId) {

                var i = groupId[a]
                if (!authenic_poster) {
                    poster = _.sample(facebookUser[where]);
                }
                var postId = 'f' + keygen()
                if (!authenic_content) {
                    content = createJDStore(storeId, null, jobId, postId)
                }

                if (!time) {
                    time = Date.now() + 4 * 1000
                } else {
                    time = time + 11 * 60 * 1000
                }

                var to = groupData[i].groupId;

                axios.post('https://joboana.herokuapp.com/newPost', {
                    postId,
                    storeId,
                    jobId,
                    poster,
                    content,
                    time,
                    to
                })
                    .then(function (result) {
                        console.log('PostStore', postId)
                    })
                    .catch(err => console.log(err));
            }
        } else {
            for (var i in groupData) {
                console.log('data', groupData[i].area, where, groupData[i].job, job)
                if (groupData[i].groupId
                    && (groupData[i].area == where || !where)
                    && (groupData[i].job && groupData[i].job.match(job) || !job )
                ) {

                    if (!authenic_poster) {
                        poster = _.sample(facebookUser[where]);
                    }
                    var postId = 'f' + keygen()
                    if (!authenic_content) {
                        content = createJDStore(storeId, null, jobId, postId)
                    }

                    if (!time) {
                        time = Date.now() + 4 * 1000
                    } else {
                        time = time + 11 * 60 * 1000
                    }

                    var to = groupData[i].groupId


                    axios.post('https://joboana.herokuapp.com/newPost', {
                        postId,
                        storeId,
                        jobId,
                        poster,
                        content,
                        time,
                        to
                    })
                        .then(result => {
                            console.log('PostStore', postId)
                        })
                        .catch(err => console.log(err));
                }

            }
        }
        resolve({code:'success'})

    });
}


function Notification_FirstRoundInterview() {
    var dataliked = _.where(likeActivity, {storeId: 's35071407305077', status: 0, type: 2});

    for (var i in dataliked) {
        var likeData = dataliked[i]
        var userData = dataUser[likeData.userId]
        var how = ''
        if (userData.provider == 'facebook') {
            how = 'báº±ng tÃ i khoáº£n facebook ' + userData.name + ' (' + userData.email + ')'
        } else {
            how = 'báº±ng tÃ i khoáº£n vá»i Email: ' + userData.email + ' / Password: tuyendungjobo'

        }
        var mail = {
            title: likeData.storeName + ' | ChÃºc má»«ng báº¡n ÄÃ£ vÆ°á»£t qua vÃ²ng há» sÆ¡',
            body: likeData.storeName + ' xin chÃºc má»«ng báº¡n ÄÃ£ vÆ°á»£t qua vÃ²ng hÃ´ sÆ¡, Äáº¿n vá»i vÃ²ng 2 lÃ  vÃ²ng phá»ng váº¥n online, Báº¡n hÃ£y thá»±c hiá»n vÃ²ng phá»ng váº¥n nÃ y báº±ng cÃ¡ch tráº£ lá»i 2 cÃ¢u há»i phá»ng váº¥n dÆ°á»i ÄÃ¢y vÃ  ghi hÃ¬nh láº¡i rá»i gá»­i vá» cho chÃºng tÃ´i <br> CÃ¢u 1: HÃ£y giá»i thiá»u báº£n thÃ¢n trong vÃ²ng 30s <br> CÃ¢u 2: Táº¡i sao chÃºng tÃ´i nÃªn chá»n báº¡n? ',
            subtitle: '',
            description1: 'ChÃ o ' + getLastName(likeData.userName),
            description2: likeData.storeName + ' xin chÃºc má»«ng báº¡n ÄÃ£ vÆ°á»£t qua vÃ²ng hÃ´ sÆ¡, Äáº¿n vá»i vÃ²ng 2 lÃ  vÃ²ng phá»ng váº¥n online, Báº¡n hÃ£y thá»±c hiá»n vÃ²ng phá»ng váº¥n nÃ y báº±ng cÃ¡ch tráº£ lá»i 2 cÃ¢u há»i phá»ng váº¥n dÆ°á»i ÄÃ¢y vÃ  ghi hÃ¬nh láº¡i rá»i gá»­i vá» cho chÃºng tÃ´i <br> CÃ¢u 1: HÃ£y giá»i thiá»u báº£n thÃ¢n trong vÃ²ng 30s <br> CÃ¢u 2: Táº¡i sao chÃºng tÃ´i nÃªn chá»n báº¡n? ',
            description3: 'LÆ°u Ã½:<br>  - Má»i cÃ¢u há»i tá»i Äa dÃ i 30s <br> - Ghi hÃ¬nh rÃµ máº·t vÃ  Äá»§ Ã¡nh sÃ¡ng <br> CÃ¡ch thá»©c thá»±c hiá»n: <br> 1. Sá»­ dá»¥ng thiáº¿t bá» ghi hÃ¬nh nhÆ° Äiá»n thoáº¡i hoáº·c laptop, quay liÃªn tá»¥c cÃ¡c cÃ¢u há»i. <br> 2. ÄÄng nháº­p vÃ o Joboapp báº±ng tÃ i khoáº£n cá»§a báº¡n, Äi tá»i trang "chá»nh sá»­a há» sÆ¡", upload video vÃ o pháº§n "video giá»i thiá»u" <br>3. Sau khi thá»±c hiá»n xong vui lÃ²ng thÃ´ng bÃ¡o cho chÃºng tÃ´i báº±ng cÃ¡ch tráº£ lá»i email hoáº·c gá»i Äiá»n tá»i 0968269860',
            calltoaction: 'Truy cáº­p Jobo',
            linktoaction: CONFIG.WEBURL,
            description4: 'HÃ£y vÃ o app hoáº·c website https://joboapp.com, ÄÄng nháº­p ' + how,
            image: ''
        };
        sendNotification(userData, mail, true, true, true)
    }
}

function Email_happyBirthDayProfile() {
    for (var i in dataProfile) {
        var profileData = dataProfile[i]
        if (profileData.userId && dataProfile && profileData && profileData.birth) {
            var userData = dataUser[i]
            var mail = {
                title: "ChÃºc má»«ng sinh nháº­t " + getLastName(profileData.name) + " <3 <3 <3",
                body: "HÃ£y Äá» nhá»¯ng lá»i chÃºc sÃ¢u láº¯ng cá»§a chÃºng tÃ´i luÃ´n á» bÃªn cáº¡nh cuá»c sá»ng tuyá»t vá»i cá»§a báº¡n. Jobo hy vá»ng trong nÄm tá»i báº¡n luÃ´n khá»e máº¡nh vÃ  thuáº­n buá»m xuÃ´i giÃ³ trong cÃ´ng viá»c. Sinh nháº­t vui váº»!!",
                subtitle: '',
                description1: 'Dear ' + getLastName(profileData.name),
                description2: 'HÃ£y Äá» nhá»¯ng lá»i chÃºc sÃ¢u láº¯ng cá»§a chÃºng tÃ´i luÃ´n á» bÃªn cáº¡nh cuá»c sá»ng tuyá»t vá»i cá»§a báº¡n. Jovo hy vá»ng trong nÄm tá»i báº¡n luÃ´n khá»e máº¡nh vÃ  thuáº­n buá»m xuÃ´i giÃ³ trong cÃ´ng viá»c. Sinh nháº­t vui váº»!!',
                description3: 'Jobo luÃ´n cá» gáº¯ng giÃºp báº¡n tÃ¬m ÄÆ°á»£c viá»c lÃ m phÃ¹ há»£p nhanh nháº¥t cÃ³ thá»',
                calltoaction: 'Xem chi tiáº¿t',
                linktoaction: CONFIG.WEBURL,
                image: ''
            };
            sendNotification(userData, mail, null, profileData.birth)


        }
    }
}


app.get('/sendList', function (req, res) {
    var storeId = req.param('storeId')
    if (storeId) {
        Email_sendListLikedToEmployer(storeId)
    } else {
        var now = new Date().getTime()
        var a = 0;
        for (var i in dataStore) {
            a++;
            var time = now + 60000 * a;
            schedule.scheduleJob(time, function () {
                Email_sendListLikedToEmployer(i)
            });
        }
    }
    res.send('done')
})

// automate Job post facebook

app.post('/unsubscribe', (req, res, next) => {
    const {email, notiId, reason} = req.body;

    const emailChannel = () => {
        return emailChannelCol.findOneAndUpdate({email: "nguyen.ninh208@gmail.com"}, {
            $set: {
                unsubscribe: {
                    notiId,
                    reason,
                    at: Date.now()
                }
            }
        });
    }

    const leadChannel = () => {
        return leadCol.findOneAndUpdate({email}, {
            $set: {
                unsubscribe: {
                    notiId,
                    reason,
                    at: Date.now()
                }
            }
        });
    }
    // console.log(email);
    const userChannel = () => {
        return new Promise((resolve, reject) => {
            userRef.orderByChild("email").equalTo(email).once('value')
                .then(user => {
                    // console.log(user.val());
                    if (!user.val()) return Promise.resolve(null);
                    return userRef.child(Object.keys(user.val())[0])
                        .update({
                            unsubscribe: {
                                notiId,
                                reason,
                                at: Date.now()
                            }
                        });
                })
                .then(() => resolve(true))
                .catch(err => reject(err));
        });
    }

    Promise.all([emailChannel(), leadChannel(), userChannel()])
        .then((data) => {
            console.log(data);
            res.status(200).json({status: 'done', message: 'Báº¡n ÄÃ£ ÄÄng kÃ½ khÃ´ng nháº­n email thÃ nh cÃ´ng!'})
        })
        .catch(err => {
            console.log(err);
            res.status(400).json({err: JSON.stringify(err), message: 'Lá»i khÃ´ng xÃ¡c Äá»nh, vui lÃ²ng thá»­ láº¡i sau!'})
        });
});


app.get('/getFbPost', function (req, res) {
    let {p: page, poster, to, jobId, id, still_alive, schedule, sort} = req.query
    var query = {}
    if (poster) {
        query.poster = poster
    }
    if (to) {
        query.to = to
    }
    if (jobId) {
        query.jobId = jobId
    }
    if (id) {
        query.id = {$ne: null}
    }
    if (schedule) {
        query.time = {$gt: new Date()}
    } else {
        query.time = {$lt: new Date()}

    }
    if (still_alive) {
        query.id = {$ne: null};
        query.still_alive = true

    }

    getPaginatedItemss(facebookPostCol, query, sort, page)
        .then(posts => res.send(posts))
        .catch(err => res.status(500).json(err));

});
app.post('/addFacebookAccount', function (req, res) {
    let account = req.body
    if (account.key) {
        configRef.child('facebookAccount').child(account.key)
            .update(account)
            .then(result => res.send(result))
            .catch(err => res.status(500).json({err}))
    }
});


// start the server
http.createServer(app).listen(port);
https.createServer(credentials, app).listen(8443);
console.log('Server started!', port);

init();
